<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SVSEntityManagerF472</name>
    </assembly>
    <members>
        <member name="F:SVSEntityManagerF472.Help.SFormHelp.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.Help.SFormHelp.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SVSEntityManagerF472.Help.SFormHelp.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SVSEntityManagerF472.SElems">
            <summary>
            Class/instance of SElems is collection of SElem objects.
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s).
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.iElems">
            <summary>
            gets list of internal (ACT) element objects (IElement)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.type">
            <summary>
            gets geometry type of the entities => SType.Elem
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.isElem">
            <summary>
            gets true if element type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.invert">
            <summary>
            gets the other elements int the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.info">
            <summary>
            gets SInfo object which can be use for setting of a Location
            SInfo is object inherited from (ACT) objects: MechanicalSelectionInfo and ISelectionInfo
            </summary>
            <exmple>
            <code>
            o = Tree.FirstActiveObject
            o.Location = em.solids.elems.Min(lambda e:  e.x, count = 5).info
            #
            #  where:
            #     o ... is an object in the Mechanical tree with Location property (e.g. Named Selection, Force, ...)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.solids">
            <summary>
            filters elements which are any solid shape type
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElems.shells">
            <summary>
            filters elements which are any shell shape type
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElems.lines">
            <summary>
            filters elements which are any line shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.beams">
            <summary>
            filters elements which are any beam shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.tris">
            <summary>
            filters elements which are any tri shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.quads">
            <summary>
            filters elements which are any quad shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.tets">
            <summary>
            filters elements which are any tetra shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.hexs">
            <summary>
            filters elements which are any hexa shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.wedges">
            <summary>
            filters elements which are any wedge shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.pyramids">
            <summary>
            filters elements which are any pyramid shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.point0s">
            <summary>
            filters elements which are ElementTypeEnum.kPoint0 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.line2s">
            <summary>
            filters elements which are ElementTypeEnum.kLine2 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.line3s">
            <summary>
            filters elements which are ElementTypeEnum.kLine3 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.beam3s">
            <summary>
            filters elements which are ElementTypeEnum.kBeam3 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.beam4s">
            <summary>
            filters elements which are ElementTypeEnum.kBeam4 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.tri3s">
            <summary>
            filters elements which are ElementTypeEnum.kTri3 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.tri6s">
            <summary>
            filters elements which are ElementTypeEnum.kTri6 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.quad4s">
            <summary>
            filters elements which are ElementTypeEnum.kQuad4 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.quad8s">
            <summary>
            filters elements which are ElementTypeEnum.kQuad8 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.tet4s">
            <summary>
            filters elements which are ElementTypeEnum.kTet4 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.tet10s">
            <summary>
            filters elements which are ElementTypeEnum.kTet10 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.hex8s">
            <summary>
            filters elements which are ElementTypeEnum.kHex8 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.hex20s">
            <summary>
            filters elements which are ElementTypeEnum.kHex20 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.wedge6s">
            <summary>
            filters elements which are ElementTypeEnum.kWedge6 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.wedge15s">
            <summary>
            filters elements which are ElementTypeEnum.kWedge15 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.pyramid5s">
            <summary>
            filters elements which are ElementTypeEnum.kPyramid5 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.pyramid13s">
            <summary>
            filters elements which are ElementTypeEnum.kPyramid13 shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.corners">
            <summary>
            filter to only corner nodes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.mids">
            <summary>
            filter to only mid-side nodes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.elems">
            <summary>
            converts to attached elements
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElems.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SElems.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SEntity})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElems.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SElem})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElems.#ctor(SVSEntityManagerF472.SEntityManager,SVSEntityManagerF472.SElems)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElems.#ctor(SVSEntityManagerF472.SEntityManager)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElems.Item(System.Int32)">
            <summary>
            gets one element by index in the list { 0, 1, 2, ... }
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SElems.op_UnaryNegation(SVSEntityManagerF472.SElems)">
            <summary>
            gets the others elements in the model
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SElems.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElems.Extend(System.Func{SVSEntityManagerF472.SElem,SVSEntityManagerF472.SElem,System.Boolean})">
            <summary>
            extends elements by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SElem, SElem, bool</param>
            <returns>new SElems</returns>
        </member>
        <member name="T:SVSEntityManagerF472.SElemFaces">
            <summary>
            Class/instance of SElemFaces is collection of SElemFace objects.
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s).
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.iElems">
            <summary>
            gets list of internal (ACT) attached element objects (IElement)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.type">
            <summary>
            gets geometry type of the entities => SType.ElemFace
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.isElemFace">
            <summary>
            gets true if elemental face type of the entities
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.elemFaceIds">
            <summary>
            gets element face Ids (indices) { 0, 1, 2, 3, ... }
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.exts">
            <summary>
            gets only external element faces in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.invert">
            <summary>
            gets the other element faces in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.info">
            <summary>
            gets SInfo object which can be use for setting of a Location
            SInfo is object inherited from (ACT) objects: MechanicalSelectionInfo and ISelectionInfo
            </summary>
            <exmple>
            <code>
            o = Tree.FirstActiveObject
            o.Location = em.solids.faces.Min(lambda e:  e.x, count = 5).info
            #
            #  where:
            #     o ... is an object in the Mechanical tree with Location property (e.g. Named Selection, Force, ...)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.corners">
            <summary>
            filter to only corner nodes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.mids">
            <summary>
            filter to only mid-side nodes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.areas">
            <summary>
            gets areas of element faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.areasPerNodes">
            <summary>
            gets areas of element faces, each divided by number of its nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.sumArea">
            <summary>
            gets sum of element face areas
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.elems">
            <summary>
            converts to attached elems
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFaces.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SEntity})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElemFaces.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SElemFace})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElemFaces.#ctor(SVSEntityManagerF472.SEntityManager,SVSEntityManagerF472.SElemFaces)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElemFaces.#ctor(SVSEntityManagerF472.SEntityManager)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaces.Item(System.Int32)">
            <summary>
            gets one element face by index in the list { 0, 1, 2, ... }
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFaces.op_UnaryNegation(SVSEntityManagerF472.SElemFaces)">
            <summary>
            gets the others element faces in the model
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFaces.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElemFaces.Extend(System.Func{SVSEntityManagerF472.SElemFace,SVSEntityManagerF472.SElemFace,System.Boolean})">
            <summary>
            extends element faces by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SElemFace, SElemFace, bool</param>
            <returns>new SElemFaces</returns>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFaces.GetDictNormalV(System.Double,Ansys.ACT.Automation.Mechanical.Analysis)">
            <summary>
            unit in [m/s]
            </summary>
            <param name="freq"></param>
            <param name="analysis"></param>
            <returns></returns>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFaces.GetDictSpecERP(System.Double,Ansys.ACT.Automation.Mechanical.Analysis)">
            <summary>
            unit in [W/m**2]
            </summary>
            <param name="freq"></param>
            <param name="analysis"></param>
            <returns></returns>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFaces.GetDictERP(System.Double,Ansys.ACT.Automation.Mechanical.Analysis)">
            <summary>
            unit in [W]
            </summary>
            <param name="freq"></param>
            <param name="analysis"></param>
            <returns></returns>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFaces.GetDictSpecERPLevel(System.Double,Ansys.ACT.Automation.Mechanical.Analysis)">
            <summary>
            unit in [dB]
            </summary>
            <param name="freq"></param>
            <param name="analysis"></param>
            <returns></returns>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFaces.GetDictERPLevel(System.Double,Ansys.ACT.Automation.Mechanical.Analysis)">
            <summary>
            unit in [dB]
            </summary>
            <param name="freq"></param>
            <param name="analysis"></param>
            <returns></returns>
        </member>
        <member name="T:SVSEntityManagerF472.SNodes">
            <summary>
            Class/instance of SNodes is collection of SNode objects. 
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s).
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.iNodes">
            <summary>
            gets list of internal (ACT) node objects (INode)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.type">
            <summary>
            gets geometry type of the entities => SType.Node
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.isNode">
            <summary>
            gets true if nodal type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.solution">
            <summary>
            gets SSolution object which keeps solution data from assigned analysis/solution (direct access to RST file),
            only one solution can bee assigned to Entity Manager,
            ACT result reader is used:
            IResultReader reader = analysis.GetResultsData();
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.morph">
            <summary>
            gets object for moving of nodes in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.result">
            <summary>
            gets object for reading of result data by ACT ResultDataTable object (access to currently evaluated result field)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.invert">
            <summary>
            gets the other nodes int the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.info">
            <summary>
            gets SInfo object which can be use for setting of a Location
            SInfo is object inherited from (ACT) objects: MechanicalSelectionInfo and ISelectionInfo
            </summary>
            <exmple>
            <code>
            o = Tree.FirstActiveObject
            o.Location = em.solids.nodes.Min(lambda e:  e.x, count = 5).info
            #
            #  where:
            #     o ... is an object in the Mechanical tree with Location property (e.g. Named Selection, Force, ...)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.corners">
            <summary>
            filter to only corner nodes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.mids">
            <summary>
            filter to only mid-side nodes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.shareds">
            <summary>
            filters nodes which are shared across bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.elems">
            <summary>
            converts to attached elements
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.elemFacesIn">
            <summary>
            converts to attached element face in
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.proportionalAreas">
            <summary>
            gets proportional areas, if the node is corner node. If its midside node, returns 0
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SNodes.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SEntity})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SNodes.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SNode})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SNodes.#ctor(SVSEntityManagerF472.SEntityManager,SVSEntityManagerF472.SNodes)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SNodes.#ctor(SVSEntityManagerF472.SEntityManager)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SNodes.Item(System.Int32)">
            <summary>
            gets one node by index in the list { 0, 1, 2, ... }
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SNodes.op_UnaryNegation(SVSEntityManagerF472.SNodes)">
            <summary>
            gets the others nodes in the model
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SNodes.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SNodes.Extend(System.Func{SVSEntityManagerF472.SNode,SVSEntityManagerF472.SNode,System.Boolean})">
            <summary>
            extends nodes by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SNode, SNode, bool</param>
            <returns>new SNodes</returns>
        </member>
        <member name="M:SVSEntityManagerF472.SNodes.RedrawMesh">
            <summary>
            redraws mesh (useful after morphing)
            </summary>
        </member>
        <member name="T:SVSEntityManagerF472.SParts">
            <summary>
            Class/instance of SParts is collection of SPart objects. 
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s).
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.iParts">
            <summary>
            gets list of internal (ACT) part objects (IGeoPart)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.type">
            <summary>
            gets geometry type of the entities => SType.Part
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.isGeom">
            <summary>
            gets true if geometry type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.invert">
            <summary>
            gets the other parts in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.names">
            <summary>
            gets list of part names  
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.volumes">
            <summary>
            gets list of part volumes  
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.areas">
            <summary>
            gets list of part areas 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.lengths">
            <summary>
            gets list of part length 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.masses">
            <summary>
            gets list of part masses 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.name">
            <summary>
            sets all part names  
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.materialName">
            <summary>
            sets all part material name 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.transparency">
            <summary>
            sets all part transparency 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.color">
            <summary>
            sets all part color 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SParts.SetRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            sets all part color by red, green, blue
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.elems">
            <summary>
            converts to attached elems
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SParts.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SParts.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SEntity})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SParts.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SPart})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SParts.#ctor(SVSEntityManagerF472.SEntityManager,SVSEntityManagerF472.SPart)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SParts.#ctor(SVSEntityManagerF472.SEntityManager,SVSEntityManagerF472.SParts)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SParts.#ctor(SVSEntityManagerF472.SEntityManager)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SParts.Add">
            <summary>
            adds bodies to current selection
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SParts.Sel">
            <summary>
            selects bodies (current selection is lost)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SParts.Item(System.Int32)">
            <summary>
            gets one part by index in the list { 0, 1, 2, ... }
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SParts.op_UnaryNegation(SVSEntityManagerF472.SParts)">
            <summary>
            gets the others parts in the model
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SParts.IfName(System.String,System.Boolean)">
            <summary>
            filters by body name (by containing sub-string)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SParts.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SParts.Activate">
            <summary>
            goes (selects) tree nodes attached to the parts 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SParts.Extend(System.Func{SVSEntityManagerF472.SPart,SVSEntityManagerF472.SPart,System.Boolean})">
            <summary>
            extends parts by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SPart, SPart, bool</param>
            <returns>new SParts</returns>
        </member>
        <member name="T:SVSEntityManagerF472.SElemFace">
            <summary>
            Class/instance of SElemFace is single element face object.
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s).
            Note, ACT has not any similar object.
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.api">
            <summary>
            The SEntityManager object created by SVS FEM s.o.r. for fast/easy work with geometrical entitites.
            The main instance (em) genarally keeps all necessary settings for selecting.
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.iElem">
            <summary>
            gets internal (ACT) object of the attached element (IElement)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.elem">
            <summary>
            gets attached element
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.geoEntityIds">
            <summary>
            gets list of reference unique Ids
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.type">
            <summary>
            gets geometry type of the entities => SType.ElemFace
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.isElemFace">
            <summary>
            gets true if elemental face type of the entities
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.elemType">
            <summary>
            gets element type (ACT) ElementTypeEnum { kTet10, kHex8, kHex20, ... }
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.faceShapeData">
            <summary>
            gets element face shape data (important for drawing of faces ...)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.faceShapeType">
            <summary>
            gets face shape type SFaceType { Quad8, Quad4, Tri6, Tri3 }
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.iFaceNodes">
            <summary>
            gets face (ACT) nodes INode
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.iConnerNodes">
            <summary>
            gets face (ACT) corner nodes INode
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.faceNodeIds">
            <summary>
            gets face (ACT) node Ids
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.cornersIds">
            <summary>
            gets face (ACT) corner node Ids
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.faceNodeCount">
            <summary>
            gets face node count
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.cornersCount">
            <summary>
            gets face corner node count
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.elemFaceShellDatas">
            <summary>
            gets face shell datas (vertices, connectivity, normal indexes)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.normal">
            <summary>
            gets face normal (average)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.normals">
            <summary>
            gets face list of normal for each node
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.polarNormal">
            <summary>
            gets face normal (average) in polar coordinates
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.polarNormals">
            <summary>
            gets face list of normal for each node in polar coordinates
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.globalNormal">
            <summary>
            gets face normal (average) in global cartesian coordinates
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.globalNormals">
            <summary>
             gets face list of normal for each node in global cartesian coordinates
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.partialElFaceAreas">
            <summary>
            gets areas of element subFaces (triangles) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.elemFaceArea">
            <summary>
            gets area of element face
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.elemFaceAreaPerNode">
            <summary>
            gets area of element face divided by number of its corner nodes -> 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.id">
            <summary>
            gets element unique Id
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.elemFaceId">
            <summary>
            gets face Id on the element (e.g.: 1, 2, 3, ...)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.info">
            <summary>
            gets SInfo object which can be use for setting of a Location
            SInfo is object inherited from (ACT) objects: MechanicalSelectionInfo and ISelectionInfo
            </summary>
            <exmple>
            <code>
            o = Tree.FirstActiveObject
            o.Location = em.solids.elemFaces.Min(lambda e:  e.x, count = 5).info
            #
            #  where:
            #     o ... is an object in the Mechanical tree with Location property (e.g. Named Selection, Force, ...)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.isInt">
            <summary>
            gets true if element face is internal 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.isExt">
            <summary>
            gets true if element face is external 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.isQuad">
            <summary>
            gets true if element face is quad shape type 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.isTri">
            <summary>
            gets true if element face is tri shape type 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.isLinear">
            <summary>
            gets true if element face is linear shape type 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.isQuadratic">
            <summary>
            gets true if element face is quadratic shape type 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.corners">
            <summary>
            filter to only corner nodes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.mids">
            <summary>
            filter to only mid-side nodes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.elems">
            <summary>
            converts to attached elements
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElemFace.elemFaces">
            <summary>
            converts to attached element faces
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElemFace.#ctor(SVSEntityManagerF472.SEntityManager,System.Int32,System.Int32)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElemFace.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElemFace.Extend(System.Func{SVSEntityManagerF472.SElemFace,SVSEntityManagerF472.SElemFace,System.Boolean})">
            <summary>
            extends element faces by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SElemFace, SElemFace, bool</param>
            <returns>new SElemFace</returns>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFace.Update">
            <summary>
            updates (re-creates) element faces (e.g. coords after morphing)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFace.GetElemFaceResult(System.Double,System.String,Ansys.ACT.Automation.Mechanical.Analysis,Ansys.ACT.Interfaces.Post.IResultReader)">
            <summary>
            gets averaged results for element face in solver unit system unit, each component (eg. Ux, Uy, Uz)
            </summary>
            <param name="freq"></param>
            <param name="ResultName"></param>
            <param name="analysis"></param>
            <param name="resData"></param>
            <returns></returns>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFace.GetElemFaceNormalU(System.Double,Ansys.ACT.Automation.Mechanical.Analysis,Ansys.ACT.Interfaces.Post.IResultReader)">
            <summary>
            gets value of element face normal displacement U in meters [m]
            </summary>
            <param name="freq"></param>
            <param name="analysis"></param>
            <param name="resData"></param>
            <returns></returns>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFace.GetElemFaceNormalV(System.Double,Ansys.ACT.Automation.Mechanical.Analysis,Ansys.ACT.Interfaces.Post.IResultReader)">
            <summary>
            gets value of element face normal velocity V in meters per second [m/s]
            </summary>
            <param name="freq"></param>
            <param name="analysis"></param>
            <param name="resData"></param>
            <returns></returns>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFace.GetElemFaceSpecERP(System.Double,Ansys.ACT.Automation.Mechanical.Analysis,Ansys.ACT.Interfaces.Post.IResultReader)">
            <summary>
            gets value of element face specific ERP (euquivalent radiated power) in watts per meters squared [W/m**2]
            </summary>
            <param name="freq"></param>
            <param name="analysis"></param>
            <param name="resData"></param>
            <returns></returns>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFace.GetElemFaceERP(System.Double,Ansys.ACT.Automation.Mechanical.Analysis,Ansys.ACT.Interfaces.Post.IResultReader)">
            <summary>
            gets value of element face ERP (euquivalent radiated power) in watts [W]
            </summary>
            <param name="freq"></param>
            <param name="analysis"></param>
            <param name="resData"></param>
            <returns></returns>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFace.GetElemFaceSpecERPLevel(System.Double,Ansys.ACT.Automation.Mechanical.Analysis,Ansys.ACT.Interfaces.Post.IResultReader)">
            <summary>
            gets value of element face specific ERP Level (euquivalent radiated power level) in decibells [dB]
            </summary>
            <param name="freq"></param>
            <param name="analysis"></param>
            <param name="resData"></param>
            <returns></returns>
        </member>
        <member name="M:SVSEntityManagerF472.SElemFace.GetElemFaceERPLevel(System.Double,Ansys.ACT.Automation.Mechanical.Analysis,Ansys.ACT.Interfaces.Post.IResultReader)">
            <summary>
            gets value of element face ERP Level (euquivalent radiated power level) in decibells [dB]
            </summary>
            <param name="freq"></param>
            <param name="analysis"></param>
            <param name="resData"></param>
            <returns></returns>
        </member>
        <member name="T:SVSEntityManagerF472.SElem">
            <summary>
            Class/instance of SElem is single element object.
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s).
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.iElem">
            <summary>
            gets internal (ACT) object of the element (IElement)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.geoEntityIds">
            <summary>
            gets list of reference unique Ids
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElem.type">
            <summary>
            gets geometry type of the entities => SType.Elem
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.isElem">
            <summary>
            gets true if element type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.id">
            <summary>
            gets element unique Id
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.info">
            <summary>
            gets SInfo object which can be use for setting of a Location
            SInfo is object inherited from (ACT) objects: MechanicalSelectionInfo and ISelectionInfo
            </summary>
            <exmple>
            <code>
            o = Tree.FirstActiveObject
            o.Location = em.solids.elems.Min(lambda e:  e.x, count = 5).info
            #
            #  where:
            #     o ... is an object in the Mechanical tree with Location property (e.g. Named Selection, Force, ...)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.elemType">
            <summary>
            gets element shape type { kHex20, kQuad4, ... }
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.volume">
            <summary>
            gets element volume in current unit (em.volumeUnit)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.crossSection">
            <summary>
            gets cross-section (ACT) object if body type is line/wire
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElem.material">
            <summary>
            gets material (ACT) object
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SElem.isSolid">
            <summary>
            gets true if element is solid shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.isShell">
            <summary>
            gets true if element is shell shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.isBeam">
            <summary>
            gets true if element is beam shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.isLine">
            <summary>
            gets true if element is line shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.isHex">
            <summary>
            gets true if element is hexa shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.isWedge">
            <summary>
            gets true if element is wedge shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.isPyramid">
            <summary>
            gets true if element is pyramid shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.isTet">
            <summary>
            gets true if element is tet shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.isTri">
            <summary>
            gets true if element is tri shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.isQuad">
            <summary>
            gets true if element is quad shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.isQuadratic">
            <summary>
            gets true if element is quadratic shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.isLinear">
            <summary>
            gets true if element is linear shape type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.corners">
            <summary>
            filter to only corner nodes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.mids">
            <summary>
            filter to only mid-side nodes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.body">
            <summary>
            converts to parent body
            </summary>
            <example><code>
            em = EM()
            b  = em.current[0]
            print b.body
            </code></example>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.elems">
            <summary>
            converts to attached elements
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElem.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SElem.#ctor(SVSEntityManagerF472.SEntityManager,Ansys.ACT.Interfaces.Mesh.IElement)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElem.#ctor(SVSEntityManagerF472.SEntityManager,System.Int32)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElem.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SElem.Extend(System.Func{SVSEntityManagerF472.SElem,SVSEntityManagerF472.SElem,System.Boolean})">
            <summary>
            extends elements by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SElem, SElem, bool</param>
            <returns>new SElems</returns>
        </member>
        <member name="M:SVSEntityManagerF472.SElem.Update">
            <summary>
            updates element data from ACT database
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SLoggerBase.em">
            <summary>
            The SEntityManager object created by SVS FEM s.o.r. for fast/easy work with geometrical entitites.
            The main instance (em) genarally keeps all necessary settings for selecting.
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SLoggerBase.api">
            <summary>
            ANSYS Mechanical ExtAPI
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SLoggerBase.logger">
            <summary>
            logging events to ANSYS Extensions Log File and defined log file
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SExtensions.Enumerate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            list.Enumerate()
            </summary>
            <example>
            <code>
            foreach ((int i, SEntity ent) in ents.Enumerate())
            {
              i   ---> 0,        1,        2,        3, ...
              ent ---> ents[0],  ents[1],  ents[2],  ents[3], ...
            }
            </code>
            </example>
            <typeparam name="TGeneralized"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:SVSEntityManagerF472.SExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            keys.Dictionary(key => ValuesFunc(key)) converts list of keys to dictionary via ValuesFunc 
            </summary>
            <example>
            <code>
            keys.Dictionary(key => ValuesFunc(key))
            keys.Dictionary(ValuesFunc)
            </code>
            </example>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="keys"></param>
            <param name="ValuesFunc"></param>
            <returns></returns>
        </member>
        <member name="M:SVSEntityManagerF472.SExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            keys.Dictionary(values) converts list of keys and values to dictionary 
            </summary>
            <example>
            <code>
            keys.Dictionary(values);
            keys.Dictionary(keys.Select(key => ValuesFunc(key)));
            </code>
            </example>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="keys"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SVSEntityManagerF472.SExtensions.ChunkBy``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            list1.ChunkBy(chunkSize: 3) ---> [1,2,3,4,5,7,8,9] => [[1,2,3],[4,5,6],[7,8,9]]
            </summary>
            <example>
            <code>
            List[int] values = new List[int] { 1,2,3,4,5,7,8,9 };
            values.ChunkBy(3);
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SExtensions.ChunkBy``1(``0[],System.Int32)">
            <summary>
            array.ChunkBy(chunkSize: 3) ---> [1,2,3,4,5,7,8,9] => [[1,2,3],[4,5,6],[7,8,9]]
            <example>
            <code>
            int[] values = new int[] { 1,2,3,4,5,7,8,9 };
            values.ChunkBy(3);
            </code>
            </example>
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SElemFaceShellDatas.normalIndexesForAreaComp">
            <summary>
            Contains info about triangle vertices, from which partial element face areas are computed.
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SConvertUtils.MeshToGeoms``2(SVSEntityManagerF472.SNodes)">
            <summary>
            converts to geometry entities
            </summary>
            <example><code>
            import datetime
            Now = datetime.datetime.now
            n = Now()
            c = em.nodes.bodies.nodes.bodies.count 
            print c, Now() - n
            </code></example>
        </member>
        <member name="M:SVSEntityManagerF472.SConvertUtils.MeshToGeoms``2(SVSEntityManagerF472.SElems)">
            <summary>
            converts to geometry entities
            </summary>
            <example><code>
            import datetime
            Now = datetime.datetime.now
            n = Now()
            c = em.elems.bodies.elems.bodies.count 
            print c, Now() - n
            # 0:01:08.377000
            </code></example>
        </member>
        <member name="M:SVSEntityManagerF472.SConvertUtils.MeshToGeoms``2(SVSEntityManagerF472.SElemFaces)">
            <summary>
            converts to geometry entities
            </summary>
            <example><code>
            import datetime
            Now = datetime.datetime.now
            n = Now()
            c = em.elemFaces.bodies.elemFaces.bodies.count 
            print c, Now() - n
            </code></example>
        </member>
        <member name="T:SVSEntityManagerF472.SUnitsBase">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.unitUtils">
            <summary>
            Unit Utilities
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.geomUnit">
            <summary>
            internal geometry length unit based on import ("m" is typical for SpaceClaim, "mm" is typical for CATIA)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.meshUnit">
            <summary>
            internal mesh length unit based on import (typically same geomUnit)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.timeUnit">
            <summary>
            time unit used in EM (default: "sec")
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.lengthUnit">
            <summary>
            length unit used in EM (default: geomUnit)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.angleUnit">
            <summary>
            angle unit used in EM (default: "angle")
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.massUnit">
            <summary>
            mass unit used in EM (default: "kg")
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.areaUnit">
            <summary>
            area unit given from lengthUnit
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.volumeUnit">
            <summary>
            volume unit given from lengthUnit
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.momentOfInertiaUnit">
            <summary>
            volume unit given from lengthUnit and massUnit
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.lengthAccurDigits">
            <summary>
            accuracy for length unit: 
            default: 10
            order  ---> 12345.12345
             3    ---> 12345.123
             2    ---> 12345.12
             1    ---> 12345.1
             0    ---> 12345
            -1    ---> 12350
            -2    ---> 11300
            -3    ---> 11000
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.angleAccurDigits">
            <summary>
            accuracy for angle unit: 
            default: 10
            order  ---> 12345.12345
             3    ---> 12345.123
             2    ---> 12345.12
             1    ---> 12345.1
             0    ---> 12345
            -1    ---> 12350
            -2    ---> 11300
            -3    ---> 11000
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.massAccurDigitis">
            <summary>
            accuracy for mass unit: 
            default: 10
            order  ---> 12345.12345
             3    ---> 12345.123
             2    ---> 12345.12
             1    ---> 12345.1
             0    ---> 12345
            -1    ---> 12350
            -2    ---> 11300
            -3    ---> 11000
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.areaAccurDigits">
            <summary>
            accuracy for mass unit given from lengthAccurDigits
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.volumeAccurDigits">
            <summary>
            accuracy for mass unit given from lengthAccurDigits
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SUnitsBase.momentOfInertiaAccurDigitis">
            <summary>
            accuracy for moment of inertia unit given from lengthAccurDigits and massAccurDigitis
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.#ctor(Ansys.ACT.Interfaces.Mechanical.IMechanicalExtAPI,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            abstract
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.Units(System.String,System.String,System.String)">
            <summary>
            sets unit strings
            default:
             lengthUnit = "mm" 
             angleUnit  = "deg" 
             massUnit   = "kg"
            </summary>
            <example>
            <code>
            em.Units("mm", "deg", "kg")
            em.Units("m", "rad", "t")
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.Units">
            <summary>
            sets default unit strings
            default:
             lengthUnit = "mm" 
             angleUnit  = "deg" 
             massUnit   = "kg"
            </summary>
            <example>
            <code>
            em.Units("mm", "deg", "kg")
            em.Units("m", "rad", "t")
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.AccurDigits">
            <summary>
            sets default rounding of numbers for keeping of accuracy,
            it is necessary for selecting by coordinates,
            the function sets the digits accuracy level lengthAccurDigits, massAccurDigitis, angleAccurDigits together
            default:
              lengthAccurDigits = 10
              angleAccurDigits  = 10
              massAccurDigitis  = 10 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.AccurDigits(System.Int32,System.Int32,System.Int32)">
            <summary>
            sets rounding of numbers for keeping of accuracy,
            it is necessary for selecting by coordinates,
            the function sets the digits accuracy level lengthAccurDigits, massAccurDigitis, angleAccurDigits together
            default:
              lengthAccurDigits = 10
              angleAccurDigits  = 10
              massAccurDigitis  = 10 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.Round(System.Double,System.Int32)">
            <summary>
            round a number
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.RoundLength(System.Double)">
            <summary>
            round a length value
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.RoundArea(System.Double)">
            <summary>
            round a area value
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.RoundVolume(System.Double)">
            <summary>
            round a volume value
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.RoundAngle(System.Double)">
            <summary>
            round a angle value
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.RoundMass(System.Double)">
            <summary>
            round a mass value
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.RoundMomentOfInertia(System.Double)">
            <summary>
            round a moment of inertia value
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.ConvertLength(System.Double)">
            <summary>
            convert a mass value to lengthUnit
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.ConvertArea(System.Double)">
            <summary>
            convert a area value to areaUnit
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.ConvertVolume(System.Double)">
            <summary>
            convert a volume value to volumeUnit
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.ConvertAngle(System.Double)">
            <summary>
            convert a angle value to angleUnit
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.ConvertMass(System.Double)">
            <summary>
            convert a mass value to massUnit
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.ConvertMomentOfInertia(System.Double)">
            <summary>
            convert a moment of intertia to momentOfInertiaUnit
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.ConvertLength(Ansys.Core.Units.Quantity)">
            <summary>
            convert a mass value to lengthUnit
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.ConvertArea(Ansys.Core.Units.Quantity)">
            <summary>
            convert a area value to areaUnit
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.ConvertVolume(Ansys.Core.Units.Quantity)">
            <summary>
            convert a volume value to volumeUnit
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.ConvertAngle(Ansys.Core.Units.Quantity)">
            <summary>
            convert a angle value to angleUnit
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.ConvertMass(Ansys.Core.Units.Quantity)">
            <summary>
            convert a mass value to massUnit
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SUnitsBase.ConvertMomentOfInertia(Ansys.Core.Units.Quantity)">
            <summary>
            convert a moment of intertia value to massUnit and lengthUnit
            </summary>
        </member>
        <member name="T:SVSEntityManagerF472.SPart">
            <summary>
            Class/instance of SPart is single part object.
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s). 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.iPart">
            <summary>
            gets internal (ACT) object of the part (IGeoPart)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.iGeoEntity">
            <summary>
            gets internal (ACT) object of the entity (IBaseGeoEntity)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.type">
            <summary>
            gets geometry type of the entities => SType.Part
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.isGeom">
            <summary>
            gets true if geometry type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.volume">
            <summary>
            gets total volume of the part in current unit (em.volumeUnit )
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.area">
            <summary>
            gets total area of the part in current unit (em.areaUnit )
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.length">
            <summary>
            gets total length of the part in current unit (em.lengthUnit )
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.mass">
            <summary>
            gets total mass of the part in current unit (em.massUnit )
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.nodePart">
            <summary>
            gets Mechanical Tree node of the part
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.Item(System.String)">
            <summary>
            gets Mechanical Tree node property (by string name PropertyByName(v)) of the part
            </summary>
            <example>
            <code> 
            print this["Color"].InternalValue 
            </code>
            </example>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.name">
            <summary>
            gets Mechanical Tree node name of the part
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.names">
            <summary>
            gets Mechanical Tree node names for inner bodies of the part
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.materialNames">
            <summary>
            gets material names for inner bodies of the part
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.transparencies">
            <summary>
            gets transparencies for inner bodies of the part
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SPart.colors">
            <summary>
            gets colors for inner bodies of the part
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.materialName">
            <summary>
            sets material names for inner bodies of the part
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.transparency">
            <summary>
            sets transparencies for inner bodies of the part
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.color">
            <summary>
            sets colors for inner bodies of the part
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.elems">
            <summary>
            converts to attached elems
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SPart.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SPart.#ctor(SVSEntityManagerF472.SEntityManager,Ansys.ACT.Interfaces.Geometry.IGeoPart)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SPart.Add">
            <summary>
            adds bodies to current selection
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SPart.Sel">
            <summary>
            selects bodies (current selection is lost)
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SPart.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SPart.Extend(System.Func{SVSEntityManagerF472.SPart,SVSEntityManagerF472.SPart,System.Boolean})">
            <summary>
            extends parts by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SPart, SPart, bool</param>
            <returns>new SParts</returns>
        </member>
        <member name="M:SVSEntityManagerF472.SPart.Activate">
            <summary>
            goes (selects) tree nodes attached to the parts 
            </summary>
        </member>
        <member name="T:SVSEntityManagerF472.SNode">
            <summary>
            Class/instance of SNode is single node object.
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s). 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.iNode">
            <summary>
            gets internal (ACT) object of the node (INode)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.geoEntityIds">
            <summary>
            gets list of reference unique Ids
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SNode.type">
            <summary>
            gets geometry type of the entities => SType.Node
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.isNode">
            <summary>
            gets true if node type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.id">
            <summary>
            gets node id (same id as in ACT)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.info">
            <summary>
            gets SInfo object which can be use for setting of a Location
            SInfo is object inherited from (ACT) objects: MechanicalSelectionInfo and ISelectionInfo
            </summary>
            <exmple>
            <code>
            o = Tree.FirstActiveObject
            o.Location = em.solids.nodes.Min(lambda e:  e.x, count = 5).info
            #
            #  where:
            #     o ... is an object in the Mechanical tree with Location property (e.g. Named Selection, Force, ...)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.solution">
            <summary>
            gets SSolution object which keeps solution data from assigned analysis/solution (direct access to RST file),
            only one solution can bee assigned to Entity Manager,
            ACT result reader is used:
            IResultReader reader = analysis.GetResultsData();
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.times">
            <summary>
            gets STimes object which contains time points from an Analysis
            which is assgined by SSolution object
            </summary>
            <exmple>
            <code>
            em = EM() 
            s = em.solution.Assign(1)
            print em.current[0].times  # gets vector of times from assigned solution (in timeUnit)
            print em.current[0].uxs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uys    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uzs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].usums  # gets vector of displacements over time for the first node (in lengthUnit)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.uxs">
            <summary>
            gets SDisps object which contains displacement points from an Analysis
            which is assgined by SSolution object
            </summary>
            <exmple>
            <code>
            em = EM() 
            s = em.solution.Assign(1)
            print em.current[0].times  # gets vector of times from assigned solution (in timeUnit)
            print em.current[0].uxs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uys    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uzs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].usums  # gets vector of displacements over time for the first node (in lengthUnit)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.uys">
            <summary>
            gets SDisps object which contains displacement points from an Analysis
            which is assgined by SSolution object
            </summary>
            <exmple>
            <code>
            em = EM() 
            s = em.solution.Assign(1)
            print em.current[0].times  # gets vector of times from assigned solution (in timeUnit)
            print em.current[0].uxs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uys    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uzs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].usums  # gets vector of displacements over time for the first node (in lengthUnit)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.uzs">
            <summary>
            gets SDisps object which contains displacement points from an Analysis
            which is assgined by SSolution object
            </summary>
            <exmple>
            <code>
            em = EM() 
            s = em.solution.Assign(1)
            print em.current[0].times  # gets vector of times from assigned solution (in timeUnit)
            print em.current[0].uxs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uys    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uzs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].usums  # gets vector of displacements over time for the first node (in lengthUnit)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.usums">
            <summary>
            gets SDisps object which contains displacement points from an Analysis
            which is assgined by SSolution object
            </summary>
            <exmple>
            <code>
            em = EM() 
            s = em.solution.Assign(1)
            print em.current[0].times  # gets vector of times from assigned solution (in timeUnit)
            print em.current[0].uxs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uys    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uzs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].usums  # gets vector of displacements over time for the first node (in lengthUnit)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.solutionNode">
            <summary>
            gets SSolution.SNode object which keeps solution data for the node from assigned analysis/solution object 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.result">
            <summary>
            gets SResult object which keeps result data from assigned analysis/solution 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.resultNode">
            <summary>
            gets SResultNode object which keeps result data for the node from assigned result object
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.resultTime">
            <summary>
            gets currently retrieved time in result object
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.resultValue">
            <summary>
            gets result value for the node in the result
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.resultUnit">
            <summary>
            gets unit of result value
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.elems">
            <summary>
            converts to attached elems
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SNode.proportionalArea">
            <summary>
            gets proportional part of surrounding external element face areas, if the node is corner node. If its midside node, returns 0
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SNode.#ctor(SVSEntityManagerF472.SEntityManager,Ansys.ACT.Interfaces.Mesh.INode)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SNode.#ctor(SVSEntityManagerF472.SEntityManager,System.Int32)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SNode.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SNode.Extend(System.Func{SVSEntityManagerF472.SNode,SVSEntityManagerF472.SNode,System.Boolean})">
            <summary>
            extends nodes by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SNode, SNode, bool</param>
            <returns>new SNodes</returns>
        </member>
        <member name="M:SVSEntityManagerF472.SNode.Update">
            <summary>
            updates (re-creates) node (e.g. coords after morphing)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SNode.DistTo(SVSEntityManagerF472.SNode)">
            <summary>
            gets distance in current lengthUnit
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SNode.DistsTo(SVSEntityManagerF472.SNodes)">
            <summary>
            gets list of distances in current lengthUnit
            </summary>
        </member>
        <member name="T:SVSEntityManagerF472.ISEntities`1">
            <summary>
            interface of basic properties
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.em">
            <summary>
            The SEntityManager object created by SVS FEM s.o.r. for fast/easy work with geometrical entitites.
            The main instance (em) genarally keeps all necessary settings for selecting.
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.entities">
            <summary>
            gets list of internal (ACT) objects 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.ids">
            <summary>
            gets list of object Ids
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.elemFaceIds">
            <summary>
            gets list of element face ids (used only for element faces)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.type">
            <summary>
            gets geometry type of the entity/entities
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.isEmpty">
            <summary>
            gets true if collection is empty (count == 0)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.isNode">
            <summary>
            gets true if nodal type of the entities  
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.isElem">
            <summary>
            gets true if elemental type of the entities  
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.isElemFace">
            <summary>
            gets true if element face type of the entities 
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.isGeom">
            <summary>
            gets true if geometry type of the entities  
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.parts">
            <summary>
            converts to attached parts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.elems">
            <summary>
            converts to attached elems
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.elemFaces">
            <summary>
            converts to attached elemFaces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.ISEntities`1.info">
            <summary>
            gets SInfo object which can be use for setting of a Location
            SInfo is object inherited from (ACT) objects: MechanicalSelectionInfo and ISelectionInfo
            </summary>
            <exmple>
            <code>
            o = Tree.FirstActiveObject
            o.Location = em.solids.Min(lambda e:  e.x, count = 5).info
            #
            #  where:
            #     o ... is an object in the Mechanical tree with Location property (e.g. Named Selection, Force, ...)
            </code>
            </exmple>
        </member>
        <member name="T:SVSEntityManagerF472.SStats`1">
            <summary>
            SStats object which provides statistical functions for a property defined by function "func" 
            </summary>
            <example><code>
            v = em.bodies.Stats(lambda e: e.volume)
            print "v.min   : " + str(v.min)     # minimal value
            print "v.max   : " + str(v.max)     # maximal value
            print "v.avg   : " + str(v.avg)     # average
            print "v.srss  : " + str(v.srss)    # square root of sum of squares 
            print "v.sum   : " + str(v.sum)     # sumation
            print "v.ssum  : " + str(v.ssum)    # sum of squares 
            print "v.count : " + str(v.count)   # count of items
            print "v.mean  : " + str(v.mean)    # mean = avg
            print "v.stdv  : " + str(v.stdv)    # standard deviation
            print "v.rms   : " + str(v.rms)     # root mean square  
            </code></example>
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.ents">
            <summary>
            gets list of attached entities for the statistics
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.func">
            <summary>
            gets function which defines property
            </summary>
            <example><code>
            func = lambda e: e.volume 
            </code></example>
        </member>
        <member name="M:SVSEntityManagerF472.SStats`1.#ctor(SVSEntityManagerF472.ISEntities{`0},System.Func{`0,System.Double})">
            <summary>
            gets SStats object which provides statistical functions for a property defined by function "func" 
            </summary>
            <example><code>
            v = em.bodies.Stats(lambda e: e.volume)
            print "v.min   : " + str(v.min)     # minimal value
            print "v.max   : " + str(v.max)     # maximal value
            print "v.avg   : " + str(v.avg)     # average
            print "v.srss  : " + str(v.srss)    # square root of sum of squares 
            print "v.sum   : " + str(v.sum)     # sumation
            print "v.ssum  : " + str(v.ssum)    # sum of squares 
            print "v.count : " + str(v.count)   # count of items
            print "v.mean  : " + str(v.mean)    # mean = avg
            print "v.stdv  : " + str(v.stdv)    # standard deviation
            print "v.rms   : " + str(v.rms)     # root mean square  
            </code></example>
        </member>
        <member name="M:SVSEntityManagerF472.SStats`1.Update">
            <summary>
            reuses function for update value list (e.g. after change of coordinate system, ...)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.ids">
            <summary>
            gets list of ids of entities pointed in "ents"
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.values">
            <summary>
            gets list of evaluated values by function "func"
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.min">
            <summary>gets minimal value</summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.max">
            <summary>gets maximal value</summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.avg">
            <summary>gets average</summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.sum">
            <summary>gets sumation</summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.ssum">
            <summary>gets sum of squares</summary>  
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.srss">
            <summary>gets square root of sum of squares</summary>  
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.count">
            <summary>gets count of items</summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.mean">
            <summary>gets mean = avg</summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.stdv">
            <summary>gets standard deviation</summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.rms">
            <summary>gets root mean square</summary>   
        </member>
        <member name="P:SVSEntityManagerF472.SStats`1.mode">
            <summary>gets most commonly occurring values</summary>   
        </member>
        <member name="M:SVSEntityManagerF472.SStats`1.SaveAllData(System.String,System.String)">
            <summary>saves data into text file (CSV format)</summary>   
        </member>
        <member name="M:SVSEntityManagerF472.SStats`1.ToString">
            <summary>gets string</summary>   
        </member>
        <member name="T:SVSEntityManagerF472.SEntitiesBase">
            <summary>
            Parent object of all entities (SParts, SPart, SBodies, SBody, SNodes, SNode, ...)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.em">
            <summary>
            The SEntityManager object created by SVS FEM s.o.r. for fast/easy work with geometrical entitites.
            The main instance (em) genarally keeps all necessary settings for selecting.
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.type">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.ids">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.isGeom">
            <summary>
            gets true if geometry type of the entities => false
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.isNode">
            <summary>
            gets true if nodal type of the entities => false
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.isElem">
            <summary>
            gets true if elemental type of the entities => false
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.isElemFace">
            <summary>
            gets true if element face type of the entities => false
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.info">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.corners">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.mids">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.parts">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.bodies">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.faces">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.edges">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.verts">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.nodes">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.elems">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.elemFaces">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.autoRedraw">
            <summary>
            defines if graphics redraw will be call after show/hide operations
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.isEmpty">
            <summary>
            gets true if collection is empty (count == 0)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.count">
            <summary>
            gets count of entities for the collection
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.#ctor(SVSEntityManagerF472.SEntityManager)">
            <summary>
            abstract
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.GetHashCode">
            <summary>
            returns hash code
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.op_Equality(SVSEntityManagerF472.SEntitiesBase,SVSEntityManagerF472.SEntitiesBase)">
            <summary>
            compares single entities by ids
            compares entinty collections by ids
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.op_Inequality(SVSEntityManagerF472.SEntitiesBase,SVSEntityManagerF472.SEntitiesBase)">
            <summary>
            compares single entities by ids
            compares entinty collections by ids
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.Equals(System.Object)">
            <summary>
            compares single entities by ids
            compares entinty collections by ids
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.visible">
            <summary>
            works with all entities in the collection
            returns true if all entities are visible
            returns false if any entity is hidden
            sets visibility for all entities
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.Show">
            <summary>
            shows all entities in the collection
            </summary>                                             
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.ShowOnly">
            <summary>
            shows all entities in the collection and hide all others (same as: .Show().HideOthers())
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.Hide">
            <summary>
            hides all entities in the collection
            </summary>    
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.HideOnly">
            <summary>
            hides all entities in the collection and shows all others
            </summary>    
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.HideOthers">
            <summary>
            hides others entities than are in the collection
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SEntitiesBase.suppressed">
            <summary>
            works with all entities in the collection
            returns true if all entities are suppresed
            returns false if any entity is suppresed
            sets suppress state for all entities
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.Unsuppress">
            <summary>
            unsuppress all entities in the collection
            </summary>   
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.Suppress">
            <summary>
            unsuppress all entities in the collection
            </summary>  
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.SuppressOthers">
            <summary>
            suppress others entities than are in the collection
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.Redraw(System.Boolean)">
            <summary>
            redraws the Mechanical graphics.
            </summary>
            <example>
            <code>
            em.Redraw()
            </code>
            </example> 
            <param name="byDS">true ... more powerfull</param>
            <returns>SEntityManager ---> self</returns>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.__str__">
            <summary>
            see ToString()
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.__len__">
            <summary>
            see count
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.Units(System.String,System.String,System.String)">
            <summary>
            sets unit strings
            default:
             lengthUnit = "mm" 
             angleUnit  = "deg" 
             massUnit   = "kg"
            </summary>
            <example>
            <code>
            em.bodies.Units("mm", "deg", "kg")
            em.bodies.Units("m", "rad", "t")
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.Units">
            <summary>
            sets default unit strings
            default:
             lengthUnit = "mm" 
             angleUnit  = "deg" 
             massUnit   = "kg"
            </summary>
            <example>
            <code>
            em.bodies.Units("mm", "deg", "kg")
            em.bodies.Units("m", "rad", "t")
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.AccurDigits(System.Int32,System.Int32,System.Int32)">
            <summary>
            sets rounding of numbers for keeping of accuracy,
            it is necessary for selecting by coordinates,
            the function sets the digits accuracy level lengthAccurDigits, massAccurDigitis, angleAccurDigits together
            default:
              lengthAccurDigits = 10
              angleAccurDigits  = 10
              massAccurDigitis  = 10 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.CS">
            <summary>
            sets global coordinate system
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.CS(System.Int32)">
            <summary>
            sets coordinate system by tree node id
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.CS(System.String)">
            <summary>
            sets coordinate system by tree node name
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.CS(Ansys.ACT.Automation.Mechanical.CoordinateSystem)">
            <summary>
            sets coordinate system by CoordinateSystem object
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.Add">
            <summary>
            adds entities to current selection
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.Sel">
            <summary>
            selects entities (current selection is lost)
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.Filter">
            <summary>
            filters entities in current selection
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntitiesBase.Remove">
            <summary>
            removes entities from current selection
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SNormal.Avg(System.Collections.Generic.List{SVSEntityManagerF472.SNormal})">
            <summary>
            gets average normal from the normal list
            </summary> 
        </member>
        <member name="T:SVSEntityManagerF472.SDraw">
            <summary>
            object allows draw additional graphics
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SDraw.source">
            <summary>
            gets/sets source object 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SDraw.graphicsEntities">
            <summary>
            gets all IGraphicsEntity objects 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SDraw.annoObjects">
            <summary>
            gets/sets SAnnoObject dictionary: annoObjects[drawId] ... 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SDraw.#ctor(SVSEntityManagerF472.SEntityManager)">
            <summary>
            gets object allows draw additional graphics
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SDraw.Clear">
            <summary>
            clears total all additional graphics
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SDraw.ContourResults(System.String,System.String,System.Collections.Generic.Dictionary{System.Int32,System.Double},SVSEntityManagerF472.SAnnoLegend.SContourSettings,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Double,System.Double,System.Boolean)">
            <summary>
            draws nodal contour result with legend
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SDraw.ContourResults(System.String,System.Double,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Double,System.Double,System.Boolean,System.String)">
            <summary>
            draws nodal contour result with legend
            </summary>
            <example><code>
            with ExtAPI.Graphics.Suspend():
                em = EM()
                em.ClearGraphics()
                em.faces.nodes.result.Assign("Total Deformation")
                em.faces.draw.ContourResults("c1", 0.0)
            # -----------------------    
            with ExtAPI.Graphics.Suspend():
                em = EM()
                em.ClearGraphics()
                em.faces.nodes.result.Assign("Total Deformation")
                em.faces.draw.ContourResults("c1", 0.0, exportVTKDataToFile = r"e:\Garrett - Augste\SIMDEV-16-Kinematics\pokus-vtk.contour")
                em.logger.Show()
            </code></example>
        </member>
        <member name="P:SVSEntityManagerF472.SDisps.label">
            <summary>
            gets name (label) of the displacement curve
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SDisps.times">
            <summary>
            gets STime object with time values
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SDisps.values">
            <summary>
            gets displacement values of the curve
            </summary>
        </member>
        <member name="T:SVSEntityManagerF472.SSolution">
            <summary>
            gets SSolution object which keeps solution data from assigned analysis/solution (direct access to RST file),
            only one solution can bee assigned to Entity Manager,
            ACT result reader is used:
            IResultReader reader = analysis.GetResultsData();
            </summary>
            <example>
            <code>
            em = EM()  
            s = em.solution.Assign("Static Structural") # by analysis name in the Mechanical tree 
            </code>
            </example>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.analysis">
            <summary>
            Mechanical Analysis (ACT) object wich is assined for getting of a solution
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.analName">
            <summary>
            Mechanical Analysis (ACT) object name
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.times">
            <summary>
            gets STimes object which contains time points from an Analysis
            which is assgined by SSolution object
            </summary>
            <exmple>
            <code>
            em = EM() 
            s = em.solution.Assign(1)
            print em.current[0].times  # gets vector of times from assigned solution (in timeUnit)
            print em.current[0].uxs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uys    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uzs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].usums  # gets vector of displacements over time for the first node (in lengthUnit)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.timesCount">
            <summary>
            gets count of time points in assgined Analysis
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.Item(System.Int32)">
            <summary>
            gets SSolution.SNode object by node id
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.nodeIds">
            <summary>
            gets all node ids for which is the solution defined
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.nodeCount">
            <summary>
            gets count of nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.source">
            <summary>
            gets all nodes
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SSolution.#ctor(SVSEntityManagerF472.SEntityManager)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SSolution.Assign(System.Int32,System.String)">
            <summary>
            assigns solution/analysis into SSolution object,
            it is necessary before reading solution (dispalcements)
            </summary>
            <example>
            <code>
            em = EM() 
            s = em.solution.Assign(1) # by analysis index in the Mechanical tree 
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SSolution.Assign(System.String,System.String)">
            <summary>
            assigns solution/analysis into SSolution object,
            it is necessary before reading solution (dispalcements)
            </summary>
            <example>
            <code>
            em = EM()  
            s = em.solution.Assign("Static Structural") # by analysis name in the Mechanical tree 
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SSolution.Assign(Ansys.ACT.Automation.Mechanical.Analysis,System.String)">
            <summary>
            assigns solution/analysis into SSolution object,
            it is necessary before reading solution (dispalcements)
            </summary>
            <example>
            <code>
            em = EM()  
            s = em.solution.Assign(Tree.FirstActiveOject) # by analysis object in the Mechanical tree 
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SSolution.Assign(Ansys.ACT.Automation.Mechanical.Analysis,SVSEntityManagerF472.SNodes,System.String,System.Boolean)">
            <summary>
            assigns solution/analysis into SSolution object,
            it is necessary before reading solution (dispalcements)
            </summary>
            <example>
            <code>
            em = EM()  
            s = em.solution.Assign(Tree.FirstActiveOject, nodes)  # by analysis object in the Mechanical tree, used only for given nodes
            </code>
            </example>
        </member>
        <member name="T:SVSEntityManagerF472.SSolution.SNode">
            <summary>
            SSolution.SNode object which keeps solution data for the node from assigned analysis/solution 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.SNode.nodeId">
            <summary>
            gets node id (same id as in ACT)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.SNode.solution">
            <summary>
            gets SSolution object which keeps solution data from assigned analysis/solution (direct access to RST file),
            only one solution can bee assigned to Entity Manager,
            ACT result reader is used:
            IResultReader reader = analysis.GetResultsData();
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.SNode.analysis">
            <summary>
            gets Mechanical Analysis (ACT) object wich is assined for getting of a solution (SSolution)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.SNode.analName">
            <summary>
            gets Mechanical Analysis (ACT) object name
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.SNode.times">
            <summary>
            gets STimes object which contains time points from an Analysis
            which is assgined by SSolution object
            </summary>
            <exmple>
            <code>
            em = EM() 
            s = em.solution.Assign(1)
            print em.current[0].times  # gets vector of times from assigned solution (in timeUnit)
            print em.current[0].uxs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uys    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uzs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].usums  # gets vector of displacements over time for the first node (in lengthUnit)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.SNode.count">
            <summary>
            gets count of time points
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.SNode.uxs">
            <summary>
            gets SDisps object which contains displacement points from an Analysis
            which is assgined by SSolution object
            </summary>
            <exmple>
            <code>
            em = EM() 
            s = em.solution.Assign(1)
            print em.current[0].times  # gets vector of times from assigned solution (in timeUnit)
            print em.current[0].uxs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uys    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uzs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].usums  # gets vector of displacements over time for the first node (in lengthUnit)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.SNode.uys">
            <summary>
            gets SDisps object which contains displacement points from an Analysis
            which is assgined by SSolution object
            </summary>
            <exmple>
            <code>
            em = EM() 
            s = em.solution.Assign(1)
            print em.current[0].times  # gets vector of times from assigned solution (in timeUnit)
            print em.current[0].uxs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uys    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uzs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].usums  # gets vector of displacements over time for the first node (in lengthUnit)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.SNode.uzs">
            <summary>
            gets SDisps object which contains displacement points from an Analysis
            which is assgined by SSolution object
            </summary>
            <exmple>
            <code>
            em = EM() 
            s = em.solution.Assign(1)
            print em.current[0].times  # gets vector of times from assigned solution (in timeUnit)
            print em.current[0].uxs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uys    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uzs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].usums  # gets vector of displacements over time for the first node (in lengthUnit)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.SNode.usums">
            <summary>
            gets SDisps object which contains displacement points from an Analysis
            which is assgined by SSolution object
            </summary>
            <exmple>
            <code>
            em = EM() 
            s = em.solution.Assign(1)
            print em.current[0].times  # gets vector of times from assigned solution (in timeUnit)
            print em.current[0].uxs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uys    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uzs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].usums  # gets vector of displacements over time for the first node (in lengthUnit)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SSolution.SNode.isOk">
            <summary>
            gets True if solution is available
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SSolution.SNode.#ctor(SVSEntityManagerF472.SSolution,System.Int32)">
            <summary>
            gets SSolution.SNode object which keeps solution data for the node from assigned analysis/solution 
            </summary>
        </member>
        <member name="T:SVSEntityManagerF472.STimes">
            <summary>
            STimes object which contains time points from an Analysis
            which is assgined by SSolution object
            </summary>
            <exmple>
            <code>
            em = EM() 
            s = em.solution.Assign(1)
            print em.current[0].times  # gets vector of times from assigned solution (in timeUnit)
            print em.current[0].uxs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uys    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].uzs    # gets vector of displacements over time for the first node (in lengthUnit)
            print em.current[0].usums  # gets vector of displacements over time for the first node (in lengthUnit)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.STimes.values">
            <summary>
            gets time values
            </summary>
        </member>
        <member name="T:SVSEntityManagerF472.SBodies">
            <summary>
            Class/instance of SBodies is collection of SBody objects. 
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s).
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.iBodies">
            <summary>
            gets list of internal (ACT) body objects (IGeoBody)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.type">
            <summary>
            gets geometry type of the entities => SType.Body
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.isGeom">
            <summary>
            gets true if geometry type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.solids">
            <summary>
            filters bodies which are solid bodies (meshed with solid elements)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.surfs">
            <summary>
            filters bodies which are surface bodies (meshed with shell elements)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.lines">
            <summary>
            filters bodies which are line bodies (meshed with beam elements)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.invert">
            <summary>
            gets the other nodes int the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.volume">
            <summary>
            gets total volume of the bodies (em.volumeUnit)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.area">
            <summary>
            gets total area of the bodies (em.areaUnit)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.length">
            <summary>
            gets total length of the bodies (em.lengthUnit)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.mass">
            <summary>
            gets total mass of the bodies (em.massUnit)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.names">
            <summary>
            gets list of body names 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.materialNames">
            <summary>
            gets list of body material names 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.crossSectionNames">
            <summary>
            gets list of body cross-section names 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.transparencies">
            <summary>
            gets list of body transparencies 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.colors">
            <summary>
            gets list of body volumes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.volumes">
            <summary>
            gets list of body volumes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.areas">
            <summary>
            gets list of body areas 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.lengths">
            <summary>
            gets list of body lengths 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.masses">
            <summary>
            gets list of body masses 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.name">
            <summary>
            sets body name for the bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.materialName">
            <summary>
            sets material name for the bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.transparency">
            <summary>
            sets transparency for the bodies
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.color">
            <summary>
            sets color for the bodies
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SBodies.SetRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            sets color (by: red, green, blue) for the bodies
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.bodies">
            <summary>
            gets self
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.elems">
            <summary>
            converts to attached elems
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SBodies.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SEntity})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SBodies.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SBody})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SBodies.#ctor(SVSEntityManagerF472.SEntityManager,SVSEntityManagerF472.SBodies)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SBodies.#ctor(SVSEntityManagerF472.SEntityManager)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBodies.Item(System.Int32)">
            <summary>
            gets one body by index in the list { 0, 1, 2, ... }
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SBodies.op_UnaryNegation(SVSEntityManagerF472.SBodies)">
            <summary>
            gets the others bodies in the model
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SBodies.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SBodies.IfName(System.String,System.Boolean)">
            <summary>
            filters by body name (by containing sub-string)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SBodies.Activate">
            <summary>
            goes (selects) nodes attached to the bodies in the tree
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SBodies.Extend(System.Func{SVSEntityManagerF472.SBody,SVSEntityManagerF472.SBody,System.Boolean})">
            <summary>
            Extend element edges by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SEdge, SEdge, bool</param>
            <returns>new SEdges</returns>
        </member>
        <member name="T:SVSEntityManagerF472.SEdges">
            <summary> 
            Class/instance of SEdges is collection of SEdge objects. 
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s).
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.iEdges">
            <summary>
            gets list of internal (ACT) edge objects (IGeoEdge)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.type">
            <summary>
            gets geometry type of the entities => SType.Edge
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.isGeom">
            <summary>
            gets true if geometry type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.bsplines">
            <summary>
            filters edges which are GeoSurfaceTypeEnum.GeoCurveBSpline type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.circles">
            <summary>
            filters edges which are GeoSurfaceTypeEnum.GeoCurveCircle type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.circleArcs">
            <summary>
            filters edges which are GeoSurfaceTypeEnum.GeoCurveCircularArc type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.elliFulls">
            <summary>
            filters edges which are GeoSurfaceTypeEnum.GeoCurveEllipseFull type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.elliArcs">
            <summary>
            filters edges which are GeoSurfaceTypeEnum.GeoCurveEllipticalArc type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.facets">
            <summary>
            filters edges which are GeoSurfaceTypeEnum.GeoCurveFaceted type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.lines">
            <summary>
            filters edges which are GeoSurfaceTypeEnum.GeoCurveLine type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.lineSegments">
            <summary>
            filters edges which are GeoSurfaceTypeEnum.GeoCurveLineSegment type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.invert">
            <summary>
            gets the other edges in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.shareds">
            <summary>
            filters edges which are shared across bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.elems">
            <summary>
            converts to attached elems
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEdges.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SEntity})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEdges.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SEdge})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEdges.#ctor(SVSEntityManagerF472.SEntityManager,SVSEntityManagerF472.SEdges)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEdges.#ctor(SVSEntityManagerF472.SEntityManager)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SEdges.Item(System.Int32)">
            <summary>
            gets one edge by index in the list { 0, 1, 2, ... }
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEdges.op_UnaryNegation(SVSEntityManagerF472.SEdges)">
            <summary>
            gets the others edges in the model
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEdges.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEdges.Extend(System.Func{SVSEntityManagerF472.SEdge,SVSEntityManagerF472.SEdge,System.Boolean})">
            <summary>
            extends edges by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SEdge, SEdge, bool</param>
            <returns>new SEdges</returns>
        </member>
        <member name="T:SVSEntityManagerF472.SEntities`2">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntities`2.entities">
            <summary>
            gets list of internal (ACT) objects 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntities`2.ids">
            <summary>
            gets list of object Ids
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntities`2.elemFaceIds">
            <summary>
            gets list of element face ids (used only for element faces)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntities`2.isEmpty">
            <summary>
            gets true if collection is empty (count == 0)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntities`2.count">
            <summary>
            gets count of entities for the collection
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntities`2.info">
            <summary>
            gets SInfo object which can be use for setting of a Location
            SInfo is object inherited from (ACT) objects: MechanicalSelectionInfo and ISelectionInfo
            </summary>
            <exmple>
            <code>
            o = Tree.FirstActiveObject
            o.Location = em.solids.Min(lambda e:  e.x, count = 5).info
            #
            #  where:
            #     o ... is an object in the Mechanical tree with Location property (e.g. Named Selection, Force, ...)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SEntities`2.draw">
            <summary>
            gets draw object which allows to draw additional graphics
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntities`2.corners">
            <summary>
            filter to only corner nodes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntities`2.mids">
            <summary>
            filter to only mid-side nodes 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            abstract
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.#ctor(SVSEntityManagerF472.SEntityManager,`0)">
            <summary>
            abstract
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            abstract
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.#ctor(SVSEntityManagerF472.SEntityManager)">
            <summary>
            abstract
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Add">
            <summary>
            adds entities to current selection
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Sel">
            <summary>
            selects entities (current selection is lost)
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.op_Addition(SVSEntityManagerF472.SEntities{`0,`1},SVSEntityManagerF472.SEntities{`0,`1})">
            <summary>
            gets union of two entity sets
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.op_Addition(SVSEntityManagerF472.SEntities{`0,`1},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            gets union of two entity sets
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.op_Addition(SVSEntityManagerF472.SEntities{`0,`1},`0)">
            <summary>
            gets union of two entity sets
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.op_Subtraction(SVSEntityManagerF472.SEntities{`0,`1},SVSEntityManagerF472.SEntities{`0,`1})">
            <summary>
            gets substract a - b
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.op_Subtraction(SVSEntityManagerF472.SEntities{`0,`1},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            gets substract a - b
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.op_Subtraction(SVSEntityManagerF472.SEntities{`0,`1},`0)">
            <summary>
            gets substract a - b
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.op_Multiply(SVSEntityManagerF472.SEntities{`0,`1},SVSEntityManagerF472.SEntities{`0,`1})">
            <summary>
            gets intersect of two entity sets
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.op_Multiply(SVSEntityManagerF472.SEntities{`0,`1},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            gets intersect of two entity sets
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.op_Multiply(SVSEntityManagerF472.SEntities{`0,`1},`0)">
            <summary>
            gets intersect of two entity sets
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SEntities`2.hiddens">
            <summary>
            filters entities which are hidden
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntities`2.showns">
            <summary>
            filters entities which are shown (visible)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntities`2.suppresseds">
            <summary>
            filters entities which are suppressed
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntities`2.actives">
            <summary>
            filters entities which are not suppressed
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.GetEnumerator">
            <summary>
            gets enumerator of collection
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            gets enumerator of collection
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Id(System.Int32)">
            <summary>
            gets single entity from collection with requested Id
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Ids(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            gets new collection of entities from collection with requested Ids
            </summary>
            <example>
            <code>
            bodies     = em.Entities([1, 2, 3, 4]) 
            intersect  = bodies.Contains([3, 4, 5])    # ---> returns bodies with ids 3 and 4
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Contains(System.Int32)">
            <summary>
            gets true if collection contains specified Id
            </summary>
            <example>
            <code>
            bodies = em.Entities([1, 2, 3, 4]) 
            bodies.Contains(1)      # ---> returns True for this case
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Contains(`0)">
            <summary>
            gets true if collection contains specified entity (SPart, SBody, ...)
            </summary>
            <example>
            <code>
            bodies = em.Entities([1, 2, 3, 4])
            body   = bodies[0]
            bodies.Contains(body)      # ---> returns True for this case
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.If(System.Func{`0,System.Boolean})">
            <summary>
            filters entity collection by a function which return true
            </summary>
            <example>
            <code>
            nodes.If(lambda n: n.x > 10)
            edges.If(lambda e: 10 &lt;= e.x &lt;= 20)
            bodies.If(lambda b: 10 &lt;= b.x &lt;= 20 and "line" in b.name)
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.ForEach(System.Action{`0})">
            <summary>
            calls action for each entity in the collection
            </summary>
            <example>
            <code>
            def F(n): print n.id
            nodes.ForEach(lambda n: F(n))   # alternative 1
            nodes.ForEach(F)                # alternative 2
            or:
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Count(System.Func{`0,System.Boolean})">
            <summary>
            returns count (integer) of entities which can be filtered by func function
            </summary>
            <example>
            <code>
            print nodes.Count(lambda n: n.x > 10)
            print edges.Count(lambda e: 10 &lt;= e.x &lt;= 20)
            print bodies.Count(lambda b: 10 &lt;= b.x &lt;= 20 and "line" in b.name)
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.IfName(System.String,System.Boolean)">
            <summary>
            filters entity collection by attached body name
            </summary>
            <example>
            <code> 
            bodies.IfName("line")  
            bodies.IfName("line", caseSensitive = True)
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Min(System.Func{`0,System.Double})">
            <summary>
            sorts entity collection by a property given by func function
            </summary>
            <example>
            <code> 
            worstOne = edges.Min(lambda e: e.x)        # sorts edges by x-coordinate and gets worst one
            worstOne = bodies.Min(lambda b: b.volume)  # sorts bodies by volume and gets worst one
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Max(System.Func{`0,System.Double})">
            <summary>
            sorts entity collection by a property given by func function
            </summary>
            <example>
            <code> 
            bestOne = edges.Max(lambda e: e.x)        # sorts edges by x-coordinate and gets best one
            bestOne = bodies.Max(lambda b: b.volume)  # sorts bodies by volume and gets best one
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Min(System.Func{`0,System.Double},System.Int32)">
            <summary>
            sorts entity collection by a property given by func function
            </summary>
            <example>
            <code> 
            sorted = edges.Min(lambda e: e.x, count = 3)        # sorts edges by x-coordinate and gets only 3 worsts
            sorted = bodies.Min(lambda b: b.volume, count = 3)  # sorts bodies by volume and gets only 3 worsts
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Max(System.Func{`0,System.Double},System.Int32)">
            <summary>
            sorts entity collection by a property given by func function
            </summary>
            <example>
            <code> 
            sorted = edges.Max(lambda e: e.x, count = 3)        # sorts edges by x-coordinate and gets only 3 bests
            sorted = bodies.Max(lambda b: b.volume, count = 3)  # sorts bodies by volume and gets only 3 bests
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.OrderBy(System.Func{`0,System.Double})">
            <summary>
            sorts entity collection by a property given by func function
            </summary>
            <example>
            <code> 
            sorted = edges.OrderBy(lambda n: n.x)        # sorts edges by x-coordinate 
            sorted = bodies.OrderBy(lambda b: b.volume)  # sorts bodies by volume
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Reverse">
            <summary>
            reveses order of items in entity collection
            </summary>
            <example>
            <code> 
            sorted = edges.OrderBy(lambda e: e.x).Reverse()        # sorts edges by x-coordinate and returns reveres
            sorted = bodies.OrderBy(lambda b: b.volume).Reverse()  # sorts bodies by volume and reveres
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Get``1(System.Func{`0,``0})">
            <summary>
            gets list of objects (properties) from entity collection
            </summary>
            <example>
            <code> 
            lengths = edges.Get(lambda e: e.length)     # ---> returns list of length values
            volumes = bodies.Get(lambda b: b.volume)    # ---> returns list of volume values
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Stats(System.Func{`0,System.Double})">
            <summary>
            gets SStats object for a property given by func
            </summary>
            <example>
            <code> 
            volumeStats = bodies.Stats(lambda b: b.volume)    
            print volumeStats.sum     # total volume
            print volumeStats.max     # maximal volume
            print volumeStats.avg     # average volume
            print volumeStats.min     # minimal volume
            print volumeStats.srss    # square root of sum of volume squres 
            print volumeStats.count   # count of entities
            print volumeStats.mean    # mean volume
            print volumeStats.stdv    # standard deviation volume
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.ToString">
            <summary>
            gets string 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.ToList">
            <summary>
            gets list (List object) of entites in the collection
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Update">
            <summary>
            updates data of entities from ACT database
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Union(SVSEntityManagerF472.ISEntities{`0},SVSEntityManagerF472.ISEntities{`0})">
            <summary>
            gets union of two collection sets
            </summary> 
            <example>
            <code> 
            bodiesC = em.Union(bodiesA, bodiesB)    
            bodiesC = bodiesA + bodiesB
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Substract(SVSEntityManagerF472.ISEntities{`0},SVSEntityManagerF472.ISEntities{`0})">
            <summary>
            gets substract of two collection sets
            </summary>
            <example>
            <code> 
            bodiesC = em.Substract(bodiesA, bodiesB)    
            bodiesC = bodiesA - bodiesB
            # ----------------------------
            # check performance:
            import datetime
            now = datetime.datetime.now()
            em = EntityManager.SEntityManager(ExtAPI)
            n1 = em.bodies.nodes
            n2 = em.bodies.nodes
            n4 = em.Entity(63).nodes
            n3 = (n1 + n2) # - n1
            print datetime.datetime.now() - now, " ---> ", n3.count
            now = datetime.datetime.now()
            n3 = n3 - n4
            print datetime.datetime.now() - now, " ---> ", n3.count
            </code>
            </example>
        </member>
        <member name="M:SVSEntityManagerF472.SEntities`2.Intersect(SVSEntityManagerF472.ISEntities{`0},SVSEntityManagerF472.ISEntities{`0})">
            <summary>
            gets intersect of two collection sets
            </summary> 
            <example>
            <code> 
            bodiesC = em.Intersect(bodiesA, bodiesB)    
            bodiesC = bodiesA * bodiesB
            </code>
            </example>
        </member>
        <member name="T:SVSEntityManagerF472.SFaces">
            <summary>
            Class/instance of SFaces is collection of SFace objects. 
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s).
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.iFaces">
            <summary>
            gets list of internal (ACT) face objects (IGeoFace)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.type">
            <summary>
            gets geometry type of the entities => SType.Face
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.isGeom">
            <summary>
            gets true if geometry type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.bsplines">
            <summary>
            filters faces which are GeoSurfaceTypeEnum.GeoSurfaceBSpline type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.cones">
            <summary>
            filters faces which are GeoSurfaceTypeEnum.GeoSurfaceCone type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.cyls">
            <summary>
            filters faces which are GeoSurfaceTypeEnum.GeoSurfaceCylinder type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.ellipCones">
            <summary>
            filters faces which are GeoSurfaceTypeEnum.GeoSurfaceEllipticalCone type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.ellipCyls">
            <summary>
            filters faces which are GeoSurfaceTypeEnum.GeoSurfaceEllipticalCylinder type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.facets">
            <summary>
            filters faces which are GeoSurfaceTypeEnum.GeoSurfaceFaceted type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.planes">
            <summary>
            filters faces which are GeoSurfaceTypeEnum.GeoSurfacePlane type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.spheres">
            <summary>
            filters faces which are GeoSurfaceTypeEnum.GeoSurfaceSphere type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.toruses">
            <summary>
            filters faces which are GeoSurfaceTypeEnum.GeoSurfaceTorus type
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.invert">
            <summary>
            gets the other faces int the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.shareds">
            <summary>
            filters faces which are shared across bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.notShareds">
            <summary>
            filters faces which are shared across bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.areas">
            <summary>
            gets list of areas for the faces
            </summary>                                           
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.normals">
            <summary>
            gets list of normals (in current CS) for the faces
            </summary>                           
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.avgNormal">
            <summary>
            gets average normal (in current CS) of the faces
            </summary>                           
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.globNormals">
            <summary>
            gets list of global normals for the faces
            </summary>                           
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.globNormal">
            <summary>
            gets average global normal of the faces
            </summary>                           
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.polarNormals">
            <summary>
            gets list of average polar normal (in current cylindrical CS) of the faces
            </summary>                     
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.avgPolarNormal">
            <summary>
            gets average polar normal (in current cylindrical CS) of the faces
            </summary>    
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.elems">
            <summary>
            converts to attached elements
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SFaces.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SEntity})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SFaces.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SFace})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SFaces.#ctor(SVSEntityManagerF472.SEntityManager,SVSEntityManagerF472.SFaces)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SFaces.#ctor(SVSEntityManagerF472.SEntityManager)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SFaces.Item(System.Int32)">
            <summary>
            gets one face by index in the list { 0, 1, 2, ... }
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SFaces.op_UnaryNegation(SVSEntityManagerF472.SFaces)">
            <summary>
            gets the others faces in the model
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SFaces.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SFaces.Extend(System.Func{SVSEntityManagerF472.SFace,SVSEntityManagerF472.SFace,System.Boolean})">
            <summary>
            extends faces by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SFace, SFace, bool</param>
            <returns>new SFaces</returns>
        </member>
        <member name="T:SVSEntityManagerF472.SVerts">
            <summary>
            Class/instance of SVerts is collection of SVert objects. 
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s).
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.iVerts">
            <summary>
            gets list of internal (ACT) vertex objects (IGeoVertex)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.type">
            <summary>
            gets geometry type of the entities => SType.Vert
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.isGeom">
            <summary>
            gets true if geometry type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.invert">
            <summary>
            gets the other verticles in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.shareds">
            <summary>
            filters verticles which are shared across bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.edges">
            <summary>
            converts to attached faces
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.verts">
            <summary>
            converts to attached verticles
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.nodes">
            <summary>
            converts to attached nodes
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.elems">
            <summary>
            converts to attached elemens
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.elemFaces">
            <summary>
            converts to attached element faces
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SVerts.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SEntity})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SVerts.#ctor(SVSEntityManagerF472.SEntityManager,System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SVert})">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SVerts.#ctor(SVSEntityManagerF472.SEntityManager,SVSEntityManagerF472.SVerts)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SVerts.#ctor(SVSEntityManagerF472.SEntityManager)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SVerts.Item(System.Int32)">
            <summary>
            gets one vertex by index in the list { 0, 1, 2, ... }
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SVerts.op_UnaryNegation(SVSEntityManagerF472.SVerts)">
            <summary>
            gets the others verticles in the model
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SVerts.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SVerts.Extend(System.Func{SVSEntityManagerF472.SVert,SVSEntityManagerF472.SVert,System.Boolean})">
            <summary>
            extends verts by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SVert, SVert, bool</param>
            <returns>new SVerts</returns>
        </member>
        <member name="T:SVSEntityManagerF472.SBody">
            <summary>
            Class/instance of SBody is single body object.
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s).
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.iBody">
            <summary>
            gets internal (ACT) object of the body (IGeoBody)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.iGeoEntity">
            <summary>
            gets internal (ACT) object of the entity (IBaseGeoEntity)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.type">
            <summary>
            gets geometry type of the entities => SType.Body
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.isGeom">
            <summary>
            gets true if geometry type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.area">
            <summary>
            gets total area of faces which wrap body (in areaUnit)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.length">
            <summary>
            gets total length of edges of the body (in lengthUnit)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.bodyType">
            <summary>
            gets body type (ACT)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.crossSection">
            <summary>
            gets cross-section (ACT) object if body type is line/wire
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.crossSectionName">
            <summary>
            gets cross-section name if body type is line/wire
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.material">
            <summary>
            gets material (ACT) object
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.nodeBody">
            <summary>
            gets Mechanical Tree node of the body
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.Item(System.String)">
            <summary>
            gets Mechanical Tree node property (by string name PropertyByName(v)) of the body
            </summary>
            <example>
            <code>
            print this["MaterialName"].InternalValue
            print this["Color"].InternalValue
            print this["Transparency"].InternalValue
            </code>
            </example>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.name">
            <summary>
            gets Mechanical Tree node name of the body
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.materialName">
            <summary>
            gets material name of the body
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.transparency">
            <summary>
            gets transparency of the body 
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.color">
            <summary>
            gets color (long integer) of the body
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.mass">
            <summary>
            gets mass of the body in current unit (em.massUnit)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.volume">
            <summary>
            gets volume of the body in current unit (em.volumeUnit )
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.Ip1">
            <summary>
            gets first principal moment of inertia of the body in current unit (em.lengthUnit)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.Ip2">
            <summary>
            gets second principal moment of inertia of the body in current unit (em.lengthUnit)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.Ip3">
            <summary>
            gets third principal moment of inertia of the body in current unit (em.lengthUnit)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.shapeIndex1D">
            <summary>
            gets shape index 1D of the body (TO-DO: tune the value)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.shapeIndex2D">
            <summary>
            gets shape index 2D of the body (TO-DO: tune the value)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.shapeIndex3D">
            <summary>
            gets shape index 3D of the body (TO-DO: tune the value)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SBody.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.elems">
            <summary>
            converts to attached elems
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SBody.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SBody.#ctor(SVSEntityManagerF472.SEntityManager,Ansys.ACT.Interfaces.Geometry.IGeoBody)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SBody.SetRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            sets color by red, green, blue (0 up to 255)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SBody.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SBody.Extend(System.Func{SVSEntityManagerF472.SBody,SVSEntityManagerF472.SBody,System.Boolean})">
            <summary>
            extends bodies by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, ver: cur.x == ver.x).Sel()
            em.current.Extend(lambda cur, ver: cur.x == ver.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SBody, SBody, bool</param>
            <returns>new SBodies</returns>
        </member>
        <member name="M:SVSEntityManagerF472.SBody.Activate">
            <summary>
            goes (selects) tree nodes attached to the bodies 
            </summary>
        </member>
        <member name="T:SVSEntityManagerF472.SEdge">
            <summary>
            Class/instance of SEdge is single edge object.
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s).
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.iEdge">
            <summary>
            gets internal (ACT) object of the body (IGeoEdge)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.iGeoEntity">
            <summary>
            gets internal (ACT) object of the entity (IBaseGeoEntity)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.type">
            <summary>
            gets geometry type of the entities => SType.Edge
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.isGeom">
            <summary>
            gets true if geometry type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.length">
            <summary>
            gets length of the edge in current unit (em.lengthUnit)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.curveType">
            <summary>
            gets curve/edge curve type (ACT)
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.elems">
            <summary>
            converts to attached elems
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEdge.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEdge.#ctor(SVSEntityManagerF472.SEntityManager,Ansys.ACT.Interfaces.Geometry.IGeoEdge)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEdge.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEdge.Extend(System.Func{SVSEntityManagerF472.SEdge,SVSEntityManagerF472.SEdge,System.Boolean})">
            <summary>
            extends edges by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, ver: cur.x == ver.x).Sel()
            em.current.Extend(lambda cur, ver: cur.x == ver.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SEdge, SEdge, bool</param>
            <returns>new SEdges</returns>
        </member>
        <member name="T:SVSEntityManagerF472.SEntity">
            <summary>
            abstract
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.iEntity">
            <summary>
            gets internal (ACT) object of the entity (IBaseGeoEntity, INode, IElement, ...)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.entities">
            <summary>
            gets internal (ACT) object of the entity in the list (IBaseGeoEntity, INode, IElement, ...)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.isEmpty">
            <summary>
            returns always false
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.id">
            <summary>
            gets entity id (same Id as in ACT)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.elemFaceId">
            <summary>
            gets face Id on the element (e.g.: 1, 2, 3, ...)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.ids">
            <summary>
            gets ids of entities (same Id as in ACT)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.elemFaceIds">
            <summary>
            gets face Ids on the element (e.g.: 1, 2, 3, ...)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.x">
            <summary>
            gets x-coordinate of the entity,
            works in local cartesian coordinate system defined via em.CS(...),
            works in unit system defined via em.Units(...) or em.lengthUnit 
            </summary>  
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.y">
            <summary>
            gets y-coordinate of the entity,
            works in local cartesian coordinate system defined via em.CS(...),
            works in unit system defined via em.Units(...) or em.lengthUnit 
            </summary>  
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.z">
            <summary>
            gets z-coordinate of the entity,
            works in local cartesian coordinate system defined via em.CS(...),
            works in unit system defined via em.Units(...) or em.lengthUnit 
            </summary>  
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.xyz">
            <summary>
            gets x, y, z coordinate of the entity (SPoint object),
            works in local cartesian coordinate system defined via em.CS(...),
            works in unit system defined via em.Units(...) or em.lengthUnit 
            </summary>  
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.globalXYZ">
            <summary>
            gets x, y, z coordinate of the entity (SPoint object),
            works in global cartesian coordinate system of the model,
            works in unit system defined via em.Units(...) or em.lengthUnit 
            </summary>  
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.r">
            <summary>
            gets r-coordinate (radial) of the entity,
            works in local polar coordinate system defined via em.CS(...),
            works in unit system defined via em.Units(...) or em.lengthUnit 
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.a">
            <summary>
            gets a-coordinate (angle) of the entity,
            works in local polar coordinate system defined via em.CS(...),
            works in unit system defined via em.Units(...) or em.angleUnit 
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.c">
            <summary>
            gets c-coordinate (circumference = length) of the entity,
            works in local polar coordinate system defined via em.CS(...),
            works in unit system defined via em.Units(...) or em.lengthUnit 
            </summary> 
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.count">
            <summary>
            gets count of entities for the collection => 1
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.info">
            <summary>
            gets SInfo object which can be use for setting of a Location
            SInfo is object inherited from (ACT) objects: MechanicalSelectionInfo and ISelectionInfo
            </summary>
            <exmple>
            <code>
            o = Tree.FirstActiveObject
            o.Location = em.solids.Min(lambda e:  e.x, count = 5).info
            #
            #  where:
            #     o ... is an object in the Mechanical tree with Location property (e.g. Named Selection, Force, ...)
            </code>
            </exmple>
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.corners">
            <summary>
            filter to only corner nodes 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntity.mids">
            <summary>
            filter to only mid-side nodes 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntity.#ctor(SVSEntityManagerF472.SEntityManager,Ansys.ACT.Interfaces.Geometry.IBaseGeoEntity)">
            <summary>
            abstract
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntity.#ctor(SVSEntityManagerF472.SEntityManager,Ansys.ACT.Interfaces.Mesh.INode)">
            <summary>
            abstract
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntity.#ctor(SVSEntityManagerF472.SEntityManager,Ansys.ACT.Interfaces.Mesh.IElement)">
            <summary>
            abstract
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntity.Add">
            <summary>
            adds entity to current selection
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntity.Sel">
            <summary>
            selects entity (current selection is lost)
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntity.op_Addition(SVSEntityManagerF472.SEntity,SVSEntityManagerF472.SEntity)">
            <summary>
            gets union of single two entities
            </summary>  
        </member>
        <member name="M:SVSEntityManagerF472.SEntity.Update">
            <summary>
            updates element data from ACT database
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntity.Score(System.Collections.Generic.IEnumerable{SVSEntityManagerF472.SMultiCriteria.SCriterion})">
            <summary>
            return score value from multi-criteria analysis
            </summary>
        </member>
        <member name="T:SVSEntityManagerF472.SFace">
            <summary>
            Class/instance of SFace is single face object.
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s). 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.iFace">
            <summary>
            gets internal (ACT) object of the face (IGeoFace)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.iGeoEntity">
            <summary>
            gets internal (ACT) object of the entity (IBaseGeoEntity)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.type">
            <summary>
            gets geometry type of the entities => SType.Face
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.isGeom">
            <summary>
            gets true if geometry type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.area">
            <summary>
            gets area of face (in areaUnit)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.surfaceType">
            <summary>
            gets type of face (ACT)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.normals">
            <summary>
            gets list of normals (in current CS) for the face
            </summary>                            
        </member>
        <member name="P:SVSEntityManagerF472.SFace.globalNormals">
            <summary>
            gets list of global normals for the face
            </summary>                           
        </member>
        <member name="P:SVSEntityManagerF472.SFace.avgNormal">
            <summary>
            gets average normal of the face
            </summary>  
        </member>
        <member name="P:SVSEntityManagerF472.SFace.avgGlobalNormal">
            <summary>
            gets average global normal of the face
            </summary>  
        </member>
        <member name="P:SVSEntityManagerF472.SFace.polarNormal">
            <summary>
            gets average polar normal of the face
            </summary>                     
        </member>
        <member name="P:SVSEntityManagerF472.SFace.radius">
            <summary>
            gets radius of cylindrical face, otherwise, 0 is returned
            </summary>                                    
        </member>
        <member name="P:SVSEntityManagerF472.SFace.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.elems">
            <summary>
            converts to attached elems
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SFace.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SFace.#ctor(SVSEntityManagerF472.SEntityManager,Ansys.ACT.Interfaces.Geometry.IGeoFace)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SFace.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SFace.Extend(System.Func{SVSEntityManagerF472.SFace,SVSEntityManagerF472.SFace,System.Boolean})">
            <summary>
            extends faces by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SFace, SFace, bool</param>
            <returns>new SFaces</returns>
        </member>
        <member name="T:SVSEntityManagerF472.SVert">
            <summary>
            Class/instance of SVert is single vertex object.
            It is SVSEntityManager basic object for working with ANSYS Mechanical model. 
            It is wrapper of several ACT object(s). 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVert.iVert">
            <summary>
            gets internal (ACT) object of the vertex (IGeoVertex)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVert.iGeoEntity">
            <summary>
            gets internal (ACT) object of the entity (IBaseGeoEntity)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVert.type">
            <summary>
            gets geometry type of the entities => SType.Vert
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVert.isGeom">
            <summary>
            gets true if geometry type of the entities => true
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVert.parts">
            <summary>
            converts to attached parts (multi-body parts) 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVert.bodies">
            <summary>
            converts to attached bodies
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVert.faces">
            <summary>
            converts to attached faces
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVert.edges">
            <summary>
            converts to attached edges
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVert.verts">
            <summary>
            converts to attached verts
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVert.nodes">
            <summary>
            converts to attached nodes
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVert.elems">
            <summary>
            converts to attached elems
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SVert.elemFaces">
            <summary>
            converts to attached element faces
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SVert.#ctor(SVSEntityManagerF472.SEntityManager,Ansys.ACT.Interfaces.Geometry.IGeoVertex)">
            <summary>
            creates new object
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SVert.ToString">
            <summary>
            gets string of the object 
            </summary> 
        </member>
        <member name="M:SVSEntityManagerF472.SVert.Extend(System.Func{SVSEntityManagerF472.SVert,SVSEntityManagerF472.SVert,System.Boolean})">
            <summary>
            extends verticles by a function.  
            </summary>
            <example>
            <code>
            em.current.Extend(lambda cur, any: cur.x == any.x).Sel()
            em.current.Extend(lambda cur, any: cur.x == any.x).showns.Sel()
            #
            # where:
            #   cur .. is currently selected object (em.current)
            #   any .. is any object in the model
            #
            </code>
            </example>
            <param name="func">SVert, SVert, bool</param>
            <returns>new SVerts</returns>
        </member>
        <member name="T:SVSEntityManagerF472.SEntityManager">
            <summary>
            The SEntityManager object created by SVS FEM s.o.r. for fast/easy work with geometrical entitites.
            The main instance (em) genarally keeps all necessary settings for selecting.
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.licenseKey">
            <summary>
            License key, please, contact SVS FEM s.r.o.
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.CPUs">
            <summary>
            number of CPUs for multi-threading operations
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.solution">
            <summary>
            gets SSolution object which keeps solution data from assigned analysis/solution (direct access to RST file),
            only one solution can bee assigned to Entity Manager,
            ACT result reader is used:
            IResultReader reader = analysis.GetResultsData();
            </summary>
            <example>
            <code>
            em = EM()  
            s = em.solution.Assign("Static Structural") # by analysis name in the Mechanical tree 
            </code>
            </example>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.morph">
            <summary>
            gets object allows morph (node moving)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.draw">
            <summary>
            gets object allows draw additional graphics
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.allNSs">
            <summary>
            gets all Named Selection (ACT) objects 
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.allCSs">
            <summary>
            gets all Coordinate System (ACT) objects
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.NewBodyCriterion(System.Func{SVSEntityManagerF472.SBody,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Multi-criterion analysis -> new criterion for bodies
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.NewFaceCriterion(System.Func{SVSEntityManagerF472.SFace,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Multi-criterion analysis -> new criterion for faces
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.NewEdgeCriterion(System.Func{SVSEntityManagerF472.SEdge,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Multi-criterion analysis -> new criterion for edges
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.NewVertCriterion(System.Func{SVSEntityManagerF472.SVert,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Multi-criterion analysis -> new criterion for verticles
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.current">
            <summary>
            current selections
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.parts">
            <summary>
            all parts (multi-body parts) in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.bodies">
            <summary>
            all bodies in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.solids">
            <summary>
            all solid bodies in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.surfs">
            <summary>
            all surfaces (shell) bodies in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.lines">
            <summary>
            all line bodies in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.hiddens">
            <summary>
            all hidden bodies in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.showns">
            <summary>
            all shown (visibled) bodies in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.suppresseds">
            <summary>
            all suppressed bodies in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.actives">
            <summary>
            all active (not-suppressed) bodies in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.faces">
            <summary>
            all active faces in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.edges">
            <summary>
            all active edges in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.verts">
            <summary>
            all active vertices in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.nodes">
            <summary>
            all active nodes in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.elems">
            <summary>
            all active elements in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.elemFaces">
            <summary>
            all active element faces in the model
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.internalParts">
            <summary>
            all internal (ACT) parts (list of IGeoPart)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.internalBodies">
            <summary>
            all internal (ACT) parts (list of IGeoBody)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.GetIEntity(System.Int32)">
            <summary>
            get internal (ACT) entity (IGeoBody, IGeoFace, ...) by refence id 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.GetIEntity(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            get list of internal (ACT) entity (IGeoBody, IGeoFace, ...) by refence ids 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Entity(System.Int32)">
            <summary>
            get EM entity (SBody, SFace, ...) by refence id
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Entities(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            get EM entities (SBodies, SFaces, ...) by refence ids 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Node(System.Int32)">
            <summary>
            get EM node (SNode) by node id 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Nodes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            get EM nodes (SNodes) by node ids
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Elem(System.Int32)">
            <summary>
            get EM element (SElem) by node id
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Elems(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            get EM elements (SElems) by node ids
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.ElemFace(System.Int32,System.Int32)">
            <summary>
            get EM element face (SElemFace) by element id and face id
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.ElemFaces(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            get EM element faces (ElemFaces) by element ids and face ids
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.coordinateSystem">
            <summary>
            currently assingned coordinate system used for selecting by location
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.typeEnumDict">
            <summary>
            mapping EM entites to ACT entities (SBody -> GeoCellTypeEnum.GeoBody, ...)
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.SEntityManager.usedElemFaces">
            <summary>
            saved (generated) element faces for fast reusing
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.#ctor(Ansys.ACT.Interfaces.Mechanical.IMechanicalExtAPI,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            constructor of EM (main object keeps all necessary settings)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.InvertSuppressed">
            <summary>
            inverts suppressed set of bodies
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.InvertVisiblity">
            <summary>
            inverts visibled set of bodies (suppressed bodies are ignored)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.CS(System.Int32)">
            <summary>
            sets coordinate system by tree node id
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.CS(System.String)">
            <summary>
            sets coordinate system by tree node name
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.CS(Ansys.ACT.Automation.Mechanical.CoordinateSystem)">
            <summary>
            sets coordinate system by CoordinateSystem object
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.CS">
            <summary>
            sets global coordinate system
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.NS(System.Int32)">
            <summary>
            gets EM (SBodies, SFaces, ...) selection from NamedSelection object given by id
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.NS(Ansys.ACT.Automation.Mechanical.NamedSelection)">
            <summary>
            gets EM (SBodies, SFaces, ...) selection from NamedSelection object  
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.NS(System.String)">
            <summary>
            gets EM (SBodies, SFaces, ...) selection from NamedSelection object given by name
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.AddNS(System.String,SVSEntityManagerF472.SEntitiesBase,System.Boolean)">
            <summary>
            adds (creates) new NamedSelection object
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.SetNS(System.String,SVSEntityManagerF472.SEntitiesBase,System.Boolean)">
            <summary>
            fills selection to NamedSelection object by EM entities (SBodies, SFaces, ...)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.FromInfo(Ansys.ACT.Interfaces.Common.ISelectionInfo)">
            <summary>
            gets EM entities (SBodies, SFaces, ...) from existing ACT selection info
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.FromInfo(SVSEntityManagerF472.SInfo)">
            <summary>
            gets EM entities (SBodies, SFaces, ...) from existing EM SInfo object
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Add(SVSEntityManagerF472.SInfo)">
            <summary>
            extends current selection in the model with entities given by EM SInfo object
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Add(SVSEntityManagerF472.SEntity)">
            <summary>
            extends current selection in the model with entities given by EM entity (SBody, SFace, ...)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Add(SVSEntityManagerF472.SEntitiesBase)">
            <summary>
            extends current selection in the model with entities given by EM entities (SBodies, SFaces, ...)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Add(Ansys.ACT.Interfaces.Geometry.IBaseGeoEntity)">
            <summary>
            extends current selection in the model with entity given by ACT entity 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Add(System.Collections.Generic.IEnumerable{Ansys.ACT.Interfaces.Geometry.IBaseGeoEntity})">
            <summary>
            extends current selection in the model with entities given by list of ACT entities 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.AddEnt(System.Int32)">
            <summary>
            extends current selection in the model with entity given by reference id
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.AddEnts(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            extends current selection in the model with entities given by list of reference ids
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.AddNode(System.Int32)">
            <summary>
            extends current selection in the model with node given by list of ids
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.AddNodes(SVSEntityManagerF472.SNodes)">
            <summary>
            extends current selection in the model with nodes given by EM nodes (SNodes)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.AddNodes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            extends current selection in the model with nodes given by list of ids
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.AddElem(System.Int32)">
            <summary>
            extends current selection in the model with element given by id
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.AddElems(SVSEntityManagerF472.SElems)">
            <summary>
            extends current selection in the model with elements given by EM elements (SElems)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.AddElems(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            extends current selection in the model with elements given by list of ids
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.AddFaceElem(System.Int32,System.Int32)">
            <summary>
            extends current selection in the model with element face given by element id and face id
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.AddFaceElems(SVSEntityManagerF472.SElemFaces)">
            <summary>
            extends current selection in the model with elements faces given by ACT element faces (SElemFaces)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.AddFaceElems(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            extends current selection in the model with element faces given by list of element ids and list of face ids
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Sel(SVSEntityManagerF472.SInfo)">
            <summary>
            creates new selection in the model with entities given by EM SInfo object
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Sel(SVSEntityManagerF472.SEntity)">
            <summary>
            creates new selection in the model with entities given by EM entity (SBody, SFace, ...)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Sel(SVSEntityManagerF472.SEntitiesBase)">
            <summary>
            creates new selection in the model with entities given by EM entities (SBodies, SFaces, ...)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Sel(Ansys.ACT.Interfaces.Geometry.IBaseGeoEntity)">
            <summary>
            creates new selection in the model with entity given by ACT entity 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Sel(System.Collections.Generic.IEnumerable{Ansys.ACT.Interfaces.Geometry.IBaseGeoEntity})">
            <summary>
            creates newt selection in the model with entities given by list of ACT entities 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.SelEnt(System.Int32)">
            <summary>
            creates new selection in the model with entity given by reference id
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.SelEnts(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            creates new selection in the model with entities given by list of reference ids
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.SelNode(System.Int32)">
            <summary>
            creates new selection in the model with node given by list of ids
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.SelNodes(SVSEntityManagerF472.SNodes)">
            <summary>
            creates new selection in the model with nodes given by EM nodes (SNodes)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.SelNodes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            creates new selection in the model with nodes given by list of ids
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.SelElem(System.Int32)">
            <summary>
            creates new selection in the model with element given by id
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.SelElems(SVSEntityManagerF472.SElems)">
            <summary>
            creates new selection in the model with elements given by EM elements (SElems)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.SelElems(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            creates new  selection in the model with elements given by list of ids
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.SelFaceElem(System.Int32,System.Int32)">
            <summary>
            creates new selection in the model with element face given by element id and face id
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.SelFaceElems(SVSEntityManagerF472.SElemFaces)">
            <summary>
            creates new selection in the model with elements faces given by ACT element faces (SElemFaces)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.SelFaceElems(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            creates new selection in the model with element faces given by list of element ids and list of face ids
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Clear">
            <summary>
            clears current selection in the model
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.ClearGraphics">
            <summary>
            clears total all additional graphics
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Normal">
            <summary>
            gets empty SNormal object 
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Normal(System.Double,System.Double,System.Double)">
            <summary>
            gets SNormal object from coordinates
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Normal(SVSEntityManagerF472.SNormal)">
            <summary>
            duplicates SNormal object
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Normal(SVSEntityManagerF472.SPoint,SVSEntityManagerF472.SPoint)">
            <summary>
            gets SNormal object from two points
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Normal(Ansys.ACT.Interfaces.Mesh.INode,Ansys.ACT.Interfaces.Mesh.INode)">
            <summary>
            gets SNormal object from two ACT nodes (INode)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Normal(System.Collections.Generic.IList{System.Double})">
            <summary>
            gets SNormal object from list of coordinates (x, y, z)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Normal(System.Double[])">
            <summary>
            gets SNormal object from array of coordinates (x, y, z)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Normal(Ansys.ACT.Interfaces.Geometry.IGeoVertex,Ansys.ACT.Interfaces.Geometry.IGeoVertex)">
            <summary>
            gets SNormal object from two ACT verticles (IGeoVertex)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Help">
            <summary>
            shows dialog with help and examples for SEntityManager object
            </summary>
            <example>
            <code>
            em = SVSEntityManagerF472.SEntityManager(ExtAPI)
            em.Help()
            </code>
            </example> 
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Redraw(System.Boolean)">
            <summary>
            redraws the Mechanical graphics.
            </summary>
            <example>
            <code>
            em.Redraw()
            </code>
            </example> 
            <param name="byDS">true ... more powerfull</param>
            <returns>SEntityManager ---> self</returns>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.GetVersion">
            <summary>
            gets version SVSEntityManager module
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.GetVersionString">
            <summary>
            gets version SVSEntityManager module (same as GetVersion())
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.CheckHomo(SVSEntityManagerF472.SEntitiesBase,SVSEntityManagerF472.SEntitiesBase,System.String)">
            <summary>
            checks if both types are same
            </summary>
            <example>
            <code>
            a = em.current
            b = em.Entities([1,2,3])
            SEntityManager.CheckHomo(a, b, "MyFunction")
            #  True  ---> if same type (SBody and SBody, SBodies and SBody)
            #  False ---> if different type (SBodies and SFaces)
            </code>
            </example> 
            <returns>true if type is same</returns>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.CheckHomo``2(SVSEntityManagerF472.ISEntities{``0},SVSEntityManagerF472.ISEntities{``1},System.String)">
            <summary>
            checks if both types are same
            </summary>
            <example>
            <code>
            a = em.current
            b = em.Entities([1,2,3])
            SEntityManager.CheckHomo(a, b, "MyFunction")
            #  True  ---> if same type (SBody and SBody, SBodies and SBody)
            #  False ---> if different type (SBodies and SFaces)
            </code>
            </example> 
            <returns>true if type is same</returns>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Union(SVSEntityManagerF472.SEntitiesBase,SVSEntityManagerF472.SEntitiesBase,System.String)">
            <summary>
            gets union two entity sets (exception is invoked if same type is not used)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Substract(SVSEntityManagerF472.SEntitiesBase,SVSEntityManagerF472.SEntitiesBase,System.String)">
            <summary>
            gets substact two entity sets (exception is invoked if same type is not used)
            </summary>
        </member>
        <member name="M:SVSEntityManagerF472.SEntityManager.Intersect(SVSEntityManagerF472.SEntitiesBase,SVSEntityManagerF472.SEntitiesBase,System.String)">
            <summary>
            gets intersect two entity sets (exception is invoked if same type is not used)
            </summary>
        </member>
        <member name="T:SVSEntityManagerF472.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SVSEntityManagerF472.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
