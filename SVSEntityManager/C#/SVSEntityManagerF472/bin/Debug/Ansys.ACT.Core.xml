<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ansys.ACT.Core</name>
    </assembly>
    <members>
        <member name="M:Ansys.ACT.Core.Attributes.AttributeHelper.InitializeCallbacks(System.Object,System.Boolean,Ansys.ACT.Core.XmlDataModel.Callbacks,Microsoft.Scripting.Hosting.ScriptScope,Ansys.ACT.Core.Application.ApplicationAPI)">
            <summary>
            Initialize callbacks declared with the CallbackDefinitionAttribute.
            </summary>
            <param name="obj">The object.</param>
            <param name="inherit">True for initilizing parent properties.</param>
            <param name="callbacksDataModel">The xmlDataModel which contains the callbacks definitions.</param>
            <param name="scope">The scope in which the callback are defined.</param>
            <param name="application">The application in which the callback is defined.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Attributes.AttributeHelper.InitializeCallbacks(System.Object,System.Boolean,System.Object,System.Type,Microsoft.Scripting.Hosting.ScriptScope,Ansys.ACT.Core.Application.ApplicationAPI)">
            <summary>
            Initialize callbacks declared with the CallbackDefinitionAttribute.
            </summary>
            <param name="obj">The object.</param>
            <param name="inherit">True for initilizing parent properties.</param>
            <param name="controller">The controller which contains the callback definitions.</param>
            <param name="dataModelType">The xmlDataModel which contains the object definition.</param>
            <param name="scope">The scope in which the callback are defined.</param>
            <param name="application">The application in which the callback is defined.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Attributes.AttributeHelper.GetEntityTypes">
            <summary>
            Helper method to retrieve all types which have an EntityType attribute.
            </summary>
            <returns>An enumerable of type.</returns>
        </member>
        <member name="T:Ansys.ACT.Core.Graphics.Tessellation">
            <summary>
            Defines a tessellation.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Graphics.Tessellation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
             <summary>
             Defines a tessellation.
             </summary>
            <remarks>
             The purpose of this class is to avoid creating billions of vertex objects and instead,
             a vertex object contains indices pointing to the right set of data in this big array.
             </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.Graphics.Tessellation.VertexCoordinates">
            <summary>
            Gets an array of point coordinates. (Ordered x1,y1,z1,x2,y2,z2,...,xn,yn,zn).
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Graphics.Tessellation.NormalCoordinates">
            <summary>
            Gets an array of normal vectors. (Ordered x1,y1,z1,x2,y2,z2,...,xn,yn,zn).
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Graphics.Tessellation.Connectivities">
            <summary>
            Gets an array of indices.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Graphics.PrimitiveShape.Disc.ReverseConnectivities">
            <summary>
            Draw the tesselations in the opposite direction so that the opposite side is shown.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.Graphics.PrimitiveShape.Primitive">
            <summary>
            Contains members that must be implemented by any primitive shapes.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Graphics.PrimitiveShape.Primitive.Tesselations">
            <summary>
            The tesselations used to build the primitive object.
            </summary>
            <remarks>The primitive object may contain more than one tesselation in the case of complexe geometry such as arrow, cone etc.</remarks>
        </member>
        <member name="M:Ansys.ACT.Core.Graphics.PrimitiveShape.Primitive.CalculateTessellations">
            <summary>
            Creates the tesselation of the primitive object.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Graphics.PrimitiveShape.Primitive.TryChangeValue``1(``0,``0,System.Action)">
            <summary>
            Applies the given assignment if the value meets the requirement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="newValue">The new value to assign to the oldValue.</param>
            <param name="assignment">The setter to apply.</param>
            <param name="oldValue">The old value that must be newly assigned.</param>
            <returns>Returns a boolean specifying whether or not the assignment has been applied.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.ACTAppConfiguration.ACTUserDataFolder">
            <summary>
            The ACT directory into which the application can write user-specific data files.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.ApplicationContext.RegisterEntity(Ansys.ACT.Core.SimData.SimEntity)">
            <summary>
            Registre an existing entity to the context.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Ansys.ACT.Core.ApplicationContext.CreateEntity(Ansys.ACT.Core.SimData.SimDataDefinition,System.Object,System.Boolean)">
            <summary>
            Create a new entity, child of parent, defined by the given definition.
            </summary>
            <param name="definition">The definition.</param>
            <param name="parentObj">The parent.</param>
            <param name="ignoreCanAdd">Indicat if the CanAdd callback should be called.</param>
            <returns>The SimEntity.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.ApplicationContext.CreateEntityUsingApplicationObject(Ansys.ACT.Core.SimData.SimDataDefinition,System.Object)">
            <summary>
            Create a new entity defined by the given definition.
            </summary>
            <param name="definition">The definition.</param>
            <param name="appObj">The application object.</param>
            <returns>The SimEntity.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.ApplicationContext.DuplicateEntity(Ansys.ACT.Core.SimData.SimEntity,System.Object)">
            <summary>
            Create a new entity, clone of the given entity.
            </summary>
            <param name="entity">The entity to duplicate.</param>
            <param name="appObj">(Optional) The application object.</param>
            <returns>The new entity.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.ApplicationContext.DuplicateSolverEntity(Ansys.ACT.Core.SimData.SimEntity,Ansys.ACT.Core.SimData.SimEntity)">
            <summary>
            Copy the properties of the oldEntity to the newEntity.
            </summary>
            <param name="newEntity">The entity that will now have the duplicated props.</param>
            <param name="oldEntity">The entity to duplicate.</param>
            <returns>The updated new entity.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.ApplicationContext.RemoveEntity(Ansys.ACT.Core.SimData.SimEntity)">
            <summary>
            Remove an entity.
            </summary>
            <param name="entity">The entity to remove.</param>
        </member>
        <member name="M:Ansys.ACT.Core.ApplicationContext.RemoveEntity(Ansys.ACT.Core.SimData.SimEntity,System.Boolean)">
            <summary>
            Remove an entity.
            </summary>
            <param name="entity">The entity to remove.</param>
            <param name="callRemove">If set to true, call the onremove callback.</param>
        </member>
        <member name="P:Ansys.ACT.Core.ApplicationContext.Debugger">
            <summary>
            Provides handy tools to trace and examine extension callbacks.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.ApplicationContext.DefaultConsole">
            <summary>
            Provides an ACTConsole initialized with a default values.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.ApplicationContext.MacroScriptEditor">
            <summary>
            Gets the editor to manipulate the content of the macro script.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.ApplicationContext.MacroScriptDebugger">
            <summary>
            Gets the debugger engine of the macro script.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.ApplicationContext.SetDebugger">
            <summary>
            Instanciates a <see cref="T:Ansys.ACT.Debugger.DebuggerEngine"/> to be able to trace extension callbacks.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.ApplicationContext.GetExtensionSourceFiles">
            <summary>
            Gets a mapping between the name of an extension and its source files.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Extension.Workflows">
            <summary>
            The extension's workflow definitions.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Extension.ExecuteCommand(System.String,Microsoft.Scripting.Hosting.ScriptScope,System.String@)">
            <summary>
            Executes a given command with the extension's scripting engine.
            </summary>
            <param name="command">Command to execute.</param>
            <param name="scriptScope">Scope to use.</param>
            <param name="standardOutput">Script engine's standard output related to this command's execution.</param>
            <returns>Executed command's return value.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Extension.GetSourceFiles">
            <summary>
            Returns the source files associated with this extension.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.ExtensionId">
            <summary>
            Provides service to uniquely identify the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.ExtensionId.UniqueId">
            <summary>
            Get the unique id of the extension.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.HelpViewer">
            <summary>
            Communicates with the Help Server in order to browse the documentation online and offline.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.HelpViewer.#ctor(System.String,System.String)">
            <summary>
            Handles the requests to view the help pages without asking for user credentials.
            </summary>
            <param name="helpViewerExecutablePath"> The path where the ANSYSHelpViewer.exe is.</param>
            <param name="locale"> The language in which the help should be displayed. E.g: "en-us".</param>
        </member>
        <member name="M:Ansys.ACT.Core.HelpViewer.Open(System.String)">
            <summary>
            Opens a help file. 
            </summary>
            <param name="request"> The requested help page.</param>
            <remarks>
            The server will require a well-formed help command when starting. 
            The Help Server takes care of any error messages that should be sent to the user.
            </remarks>
            <remarks>
            The syntax required for Help Server commands is very simple. 
            The syntax depends on the type of help you wish to display (e.g. help from ANSYS, Workbench, or Workbench 2). 
            Begin your command by identifying the help file’s owner product. For Mechanical APDL help, prefix with "ANSYS:". 
            For Workbench, prefix with "WB:". For Workbench 2, prefix with "WB2:"
            </remarks>
            <example> The following command displays the ans_tut.html file, and automatically takes the user to the "Preface" section (tut_preface):
            ANSYS:ans_tut/tutpreface.html#tut_preface
            </example>
        </member>
        <member name="M:Ansys.ACT.Core.HelpViewer.GetPort">
            <summary>
            To find the port associated with the socket, the Help Server prints the port number to standard out every time it is called.
            Therefore, you can just read the port number from standard out in order to connect your product with the help server.
            </summary>
            <remarks>
            The Help Server's current port should be comprised between 50000 and 50019.
            </remarks>
        </member>
        <member name="T:Ansys.ACT.Core.HtmlHelpTemplate">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            Contains various information that can be used in the t4 HtmlHelpTemplate.tt
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.HtmlHelpTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.HtmlHelpTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.HtmlHelpTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.HtmlHelpTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.HtmlHelpTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.HtmlHelpTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.HtmlHelpTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.HtmlHelpTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.HtmlHelpTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.HtmlHelpTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.HtmlHelpTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.HtmlHelpTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.HtmlHelpTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.HtmlHelpTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.HtmlHelpTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.HtmlHelpTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.HtmlHelpTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.HtmlHelpTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.HtmlHelpTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.HtmlHelpTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.ProcessUtilities">
            <summary>
            This class exposes process-based utility methods used to run external applications.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.ProcessUtilities.Start(System.String,System.String[])">
            <summary>
            Starts an application, file, or other target.
            </summary>
            <param name="target">The fully-qualified path to the application, file, or other target</param>
            <param name="args">Command line arguments</param>
            <returns>The process exit code.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.ProcessUtilities.Start(System.String,System.Boolean,System.String[])">
            <summary>
            Starts an application, file, or other target.
            </summary>
            <param name="target">The fully-qualified path to the application, file, or other target</param>
            <param name="useShell">Indicates whether or not to execute the target using the OS shell</param>
            <param name="args">Command line arguments</param>
            <returns>The process exit code.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.WindowsProcessHelper.ParentProcessUtilities.GetParentProcess">
            <summary>
            Gets the parent process of the current process.
            </summary>
            <returns>An instance of the Process class.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.WindowsProcessHelper.ParentProcessUtilities.GetParentProcess(System.Int32)">
            <summary>
            Gets the parent process of specified process.
            </summary>
            <param name="id">The process id.</param>
            <returns>An instance of the Process class.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.WindowsProcessHelper.ParentProcessUtilities.GetParentProcess(System.IntPtr)">
            <summary>
            Gets the parent process of a specified process.
            </summary>
            <param name="handle">The process handle.</param>
            <returns>An instance of the Process class or null if an error occurred.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Messages.ConsoleWarnings.AddWarning(System.String,System.String,System.Int32)">
            <summary>
            Formats the warning depending on type and adds the new warning to the collection.
            </summary>
            <param name="name">The name of what's causing the warning ei. method name</param>
            <param name="attribute">The message associated with this warning ei. Method is osbolete..</param>
            <param name="type">A value that determines what type of warning. ei 1 = obsolete method</param>
        </member>
        <member name="M:Ansys.ACT.Core.Messages.ConsoleWarnings.ContainsWarning(System.String,System.Int32)">
            <summary>
            This is a method for future extensibility. In case we'd like to check a warning is already in the set.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Ansys.ACT.Core.SimData.SimDataManager.InitAfterLoad">
            <summary>
            This function is called after the deserialization
            process.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.SimData.SimDesignExplorer">
            <summary>
            DesignExplorer SimEntity
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.SimData.SimEntity.InternalAddProperty(Ansys.ACT.Core.SimData.SimProperty)">
            <summary>
            Add the property from the collections of the SimEntity.
            This method must not be called. It is only called from the AttachToEntity 
            method of the SimProperty.
            </summary>
            <param name="property">The property to add.</param>
        </member>
        <member name="M:Ansys.ACT.Core.SimData.SimEntity.InternalRemoveProperty(Ansys.ACT.Core.SimData.SimProperty)">
            <summary>
            Remove the property from the collections of the SimEntity.
            This method must not be called. It is only called from the AttachToEntity 
            method of the SimProperty.
            </summary>
            <param name="property">The property to remove.</param>
        </member>
        <member name="F:Ansys.ACT.Core.SimData.SimGeoFeature._onGenerateCallback">
            <summary>
            Called when the feature is generated.
            </summary>
            <param name="entity">The generated feature.</param>
            <param name="progressFunction">A progress function.</param>
            <returns>True if the generation successed; false otherwise.</returns>
        </member>
        <member name="F:Ansys.ACT.Core.SimData.SimGeoFeature._onAfterGenerateCallback">
            <summary>
            Called at the end of the generation process.
            </summary>
            <param name="entity">The feature.</param>
        </member>
        <member name="F:Ansys.ACT.Core.SimData.SimGeoFeature._onEditCallback">
            <summary>
            OnEdit.
            </summary>
            <param name="entity">The feature.</param>
        </member>
        <member name="F:Ansys.ACT.Core.SimData.SimLoad.GetNodalValuesForDisplayCallback">
            <returns>An IEnumerable of Double containing the values for each id in nodeIds. The values have to be in the same order as nodeIds.</returns>
        </member>
        <member name="T:Ansys.ACT.Core.SimData.SimOptimizer">
            <summary>
            DesignExplorer Optimizer
            <code>
                <optimizer>...</optimizer>
            </code>
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.SimData.SimProperty.LocalizedUnitString(System.String)">
            <summary>
            Provide translated name of some units, 
            ex: in french Angle unit (degree) becomes '°' and 
            Angular Velocity (rpm) becomes 'tr/min'
            </summary>
            <returns>A string of the localized unit.</returns>
        </member>
        <member name="F:Ansys.ACT.Core.SimData.SimResult.GetValueCallback">
            <returns>An Enumerable of Double containing the result values for the given meshId.</returns>
        </member>
        <member name="E:Ansys.ACT.Core.UI.HTMLRenderer.EditorComponentRenderer.GutterClicked">
            <summary>
            Event raised when the editor gutter is clicked (where the line numbers are.).
            The event argument is the row on which the gutter was clicked.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.UI.HTMLRenderer.EditorComponentRenderer.UseConsoleKeyBinding">
            <summary>
            Use "Enter" to execute, "Ctrl-Arrow" to navigate in the history etc...
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.UI.HTMLRenderer.EditorComponentRenderer.UseAutoResizing">
            <summary>
            Resize the editor when the number of lines exceed its size.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.UI.HTMLRenderer.EditorComponentRenderer.SetSnippets(System.Collections.Generic.IList{Ansys.ACT.Console.Snippets.Snippet})">
            <summary>
            Sets the given list of snippets in the autocompletion of the console.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.UI.HTMLRenderer.EditorComponentRenderer.ClearUndoStack">
            <summary>
            Clears the undo stack.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.UI.HTMLRenderer.EditorComponentRenderer.OnUpdateIntellisenseInfoCalled(Ansys.ACT.Core.UI.HTMLRenderer.CallbackWebObject,Ansys.ACT.Core.UI.HTMLRenderer.CallbackEventArgs)">
            <summary>
            Populate the tooltip with methods and properties.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.UI.HTMLRenderer.EditorComponentRenderer.NavigateThroughHistoryOnCalled(Ansys.ACT.Core.UI.HTMLRenderer.CallbackWebObject,Ansys.ACT.Core.UI.HTMLRenderer.CallbackEventArgs)">
            <summary>
            Navigates through the command history.
            </summary>
            <param name="sender"></param>
            <param name="callbackEventArgs"></param>
        </member>
        <member name="M:Ansys.ACT.Core.UI.HTMLRenderer.EditorComponentRenderer.OnHistorySearchCalled(Ansys.ACT.Core.UI.HTMLRenderer.CallbackWebObject,Ansys.ACT.Core.UI.HTMLRenderer.CallbackEventArgs)">
            <summary>
            Gets the next matching history input starting from the last one to the oldest.
            </summary>
            <param name="sender"></param>
            <param name="callbackEventArgs"></param>
        </member>
        <member name="M:Ansys.ACT.Core.UI.HTMLRenderer.EditorComponentRenderer.OnResetHistorySearchCalled(Ansys.ACT.Core.UI.HTMLRenderer.CallbackWebObject,Ansys.ACT.Core.UI.HTMLRenderer.CallbackEventArgs)">
            <summary>
            Reset the reverse search cache (i.e: last matching index etc...)
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.UI.HTMLRenderer.PropertiesComponentRenderer.HasAnyReadonlyChange(Ansys.ACT.Core.UI.HTMLRenderer.PropertyWebObject)">
            <summary>
            Verify if any properties has its readonly property changed.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.UI.HTMLRenderer.PropertiesComponentRenderer.IsUpdating">
            <summary>
            Indicates if the component is being updated.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.UI.HTMLRenderer.PropertiesComponentRenderer.IsReseting">
            <summary>
            Indicates if the component is being reset.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.UI.HTMLRenderer.PropertiesComponentRenderer.IsRefreshing">
            <summary>
            Indicates if the component is being refreshed.
            </summary>
        </member>
        <member name="E:Ansys.ACT.Core.UI.HTMLRenderer.PropertiesComponentRenderer.UpdateComplete">
            <summary>
            Event fired when an update of the component has been completed.
            </summary>
        </member>
        <member name="E:Ansys.ACT.Core.UI.HTMLRenderer.PropertiesComponentRenderer.ResetComplete">
            <summary>
            Event fired when the component has been reset.
            </summary>
        </member>
        <member name="E:Ansys.ACT.Core.UI.HTMLRenderer.PropertiesComponentRenderer.RefreshComplete">
            <summary>
            Event fired when the component has been refreshed.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.UI.HTMLRenderer.TabularDataComponentRenderer.ValidateTable">
            <summary>
            Invoke the onvalidate callback at the property table level.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.UI.HTMLRenderer.TreeComponentRenderer.ToggleClick(System.Boolean)">
            <summary>
            Sets or gets user interaction used for expanding or collapsing any item.
            </summary>
            <param name="toggleClick"></param>
        </member>
        <member name="M:Ansys.ACT.Core.UI.HTMLRenderer.TreeComponentRenderer.IsMoveAuthorized(Ansys.ACT.Core.UI.HTMLRenderer.TreeNode,Ansys.ACT.Core.UI.HTMLRenderer.TreeNode)">
            <summary>
            Checks if a parent node is dragged inside its own children
            </summary>
            <param name="dragItem">The item dragged.</param>
            <param name="dropItem">The item dropped.</param>
            <returns></returns>
        </member>
        <member name="M:Ansys.ACT.Core.UI.HTMLRenderer.WebGL.Tesselation.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Int32})">
            <summary>
            Defines a tessellation.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.UI.HTMLRenderer.WebGL.Tesselation.Points">
            <summary>
            Gets an array of point coordinates. (Ordered x1,y1,z1,x2,y2,z2,...,xn,yn,zn).
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.UI.HTMLRenderer.WebGL.Tesselation.Normals">
            <summary>
            Gets an array of normal vectors. (Ordered x1,y1,z1,x2,y2,z2,...,xn,yn,zn).
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.UI.HTMLRenderer.WebGL.Tesselation.Connectivities">
            <summary>
            Gets an array of indices. (Ordered n1,i1_1,i1_2,...,i1_n1, n2,i2_1,i2_2,...i2_n2, ...).
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.UI.UIPanels.ACTHelpPanel">
            <summary>
            An html page containing localized ACT help links.
            </summary>
            <remarks>
            This generates a new help.html page (if non existing) in the ACT Appdata folder for the current localization.
            </remarks>
        </member>
        <member name="M:Ansys.ACT.Core.UI.UIPanels.ACTHelpPanel.HelpComponent_LinkClicked(System.Object,Ansys.ACT.Interfaces.UserInterface.LinkClickedEventArgs)">
            <summary>
            Redirects the clicked links to a webbrowser and process them with the help viewer if needed.
            </summary>
            <remarks>
            This is needed as href links in the HtmlComponentRenderer do not have the authorization to open a new web browser.
            </remarks>
        </member>
        <member name="M:Ansys.ACT.Core.UI.UIPanels.Console.ConsoleInputPresenter.ReverseSearch(System.String,Ansys.ACT.Console.History.SearchDirection)">
            <summary>
            Gets the next matching history input starting from the last one to the oldest.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.UI.UIPanels.Console.ConsoleUIPanel.InitToolbar">
            <summary>
            Reinitialize the toolbar.
            </summary>
            <remarks> The toolbar is a tricky component and needs to be reinitialized if one of its component changes.
            (This is the case when new extensions are loaded.)
            </remarks>
        </member>
        <member name="M:Ansys.ACT.Core.UI.UIPanels.Console.SnippetPropertyDialog.Show(Ansys.ACT.Console.Snippets.SnippetNode,Ansys.ACT.Core.UI.UIPanels.Console.SnippetAction,System.Boolean,System.String,System.String)">
            <summary>
            Shows the dialog with pre-initialized caption and value.
            </summary>
            <param name="snippetNode">The snippet node in which to apply the properties.</param>
            <param name="action">Specifies what action should be done.</param>
            <param name="hideValue">Specifies whether to hide the field containing the value of the snippet.</param>
            <param name="caption">Default snippet caption to show.</param>
            <param name="value">Default snippet value to show.</param>
        </member>
        <member name="M:Ansys.ACT.Core.UI.UIPanels.Debugger.MacroScriptUIPanel.SetStyle">
            * STYLE */
        </member>
        <member name="M:Ansys.ACT.Core.UI.Panels.StartPageUIPanel.UpdateDebuggerVisibility">
            <summary>
            Verify whether the debugger must be shown or not.
            </summary>
            <remarks>
            The debugger cannot be shown in a context other than Project, Mechanical and DM.
            </remarks>
        </member>
        <member name="T:Ansys.ACT.Core.Utilities.AttributeCollection">
            <summary>
            A collection of attributes.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.AttributeCollection.GetValue(System.String,System.Object)">
            <summary>
            Gets an attribute value by its name.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="defaultValue">The default value</param>
            <returns>The attribute value if the attribute is in the collection,
            the default value else.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.AttributeCollection.GetValue(System.String)">
            <summary>
            Gets an attribute value by its name.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The attribute value if the attribute is in the collection,
            null else.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.AttributeCollection.GetStringValue(System.String)">
            <summary>
            Gets an attribute value by its name.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The attribute value as string.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.AttributeCollection.SetValue(System.String,System.Object)">
            <summary>
            Set an attribute value.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attrbiute.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.AttributeCollection.Remove(System.String)">
            <summary>
            Remove an attribute. The attribute cannot be removed if it was declared as
            static attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>True if the element is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.AttributeCollection.Contains(System.String)">
            <summary>
            Check if the collection contains an attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>True if the collection contains the attribute; otherwise, false.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.Utilities.AttributeCollection.Item(System.String)">
            <summary>
            Get or set an attribute value.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The attribute, null if the attribute name is not in
            the collection.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.Utilities.AttributeCollection.Keys">
            <summary>
            The list of the available keys in the collection.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.AttributeCollection.Clone">
            <summary>
            Create a clone of the currection collection.
            </summary>
            <returns>A clone of the currection collection.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.AttributeCollection.FillDynamicAttributes(Ansys.ACT.Core.Utilities.AttributeCollection)">
            <summary>
            Fill the dynamic attributes of the collection with the given 
            AttributeCollection.
            </summary>
            <param name="other">An AttributeCollection.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.AttributeCollection.FillStaticAttributesFromXml(Ansys.ACT.Core.XmlDataModel.Attributes)">
            <summary>
            Fill the static attributes of the collection with the given XmlNode.
            </summary>
            <param name="dataModel">The DataModel wich correpond to the Attributes tag.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ColorHelper.StringToColor(System.String)">
            <summary>
            Converts a string "#RRGGBB" into a fully opaque Ansys.Utilities.Color.
            </summary>
            <param name="stringColor">The string to convert.</param>
            <returns>The color created from the string.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ColorHelper.ColorToString(Ansys.Utilities.Color)">
            <summary>
            Convert a Color into a string "#RRGGBB". Any transparency is lost.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>A string representing the color.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ColorHelper.GetDarkerColor(System.String,System.Single)">
            <summary>
            Darkens a color by the given percentage.
            </summary>
            <param name="stringColor">The color to modify as a "#RRGGBB" string.</param>
            <param name="pc">A value between 0 and 1.</param>
            <returns>A string representing the new color.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ColorHelper.GetLighterColor(System.String,System.Single)">
            <summary>
            Lightens a color by the given percentage.
            </summary>
            <param name="stringColor">The color to modify as a "#RRGGBB" string.</param>
            <param name="pc">A value between 0 and 1.</param>
            <returns>A string representing the new color.</returns>
        </member>
        <member name="T:Ansys.ACT.Core.Utilities.NamedCollection`1">
            <summary>
            Represents a collection of INamed objects that could be found by its Name field.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Utilities.NamedCollection`1.Item(System.String)">
            <summary>
            The operator [] can find an object by its name.
            </summary>
            <example>
            The following code will search the object named "Banana" in the collection "myCollection".
            <code>
            INamed myObject = myCollection["Banana"];
            </code>
            </example>
            <param name="name">Name of the object that we want to get.</param>
            <returns>The INamed object where the name property is the given input name. Returns null if not found.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.Utilities.NamedCollection`1.Names">
            <summary>
            Returns the list of the names of the objects in the collection.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.Utilities.ProcessExtension">
            <summary>
            A utility class to deals with process and can for example determine a process parent.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ProcessExtension.GetParentProcess(System.Diagnostics.Process)">
            <summary>
            Gets the parent process of the current process.
            </summary>
            <returns>An instance of the Process class.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ProcessExtension.GetProcessName(System.Diagnostics.Process)">
            <summary>
            Gets the name of the process.
            </summary>
            <returns>The name that the system uses to identify the process to the user.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ProcessExtension.IsChildOfProcess(System.Diagnostics.Process,System.String)">
            <summary>
            Check if a process has a process with a name containing a given string, in its parent hierarchy. 
            </summary>
            <param name="p">The process in question</param>
            <param name="name">The string to test</param>
            <returns>true if the process has a parent with a name containing the given string, false otherwise</returns>
        </member>
        <member name="T:Ansys.ACT.Core.Utilities.PythonResultFormatter">
            <summary>
            Helper class that formats the object returned by the script engine.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.PythonResultFormatter.Format(System.Object)">
            <summary>
            Helper method that formats the object returned by the script engine.
            </summary>
            <param name="value">Value to format.</param>
            <returns>A string that does its best to return a Python-like formatted value.</returns>
        </member>
        <member name="T:Ansys.ACT.Core.Utilities.PythonTemplateCompilerException">
            <summary>
             Exception throw by the compiler.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.QuantityConvertor.Unconvert(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
             Divide each value of values by the ConversionFactor.
            </summary>
            <param name="values">The values to convert.</param>
            <returns>The converted values</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.QuantityConvertor.Convert(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
             Multiply each value of values by the ConversionFactor.
            </summary>
            <param name="values">The values to convert.</param>
            <returns>The converted values</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.QuantityConvertor.Unconvert(System.Double[]@)">
            <summary>
            Divide each value of values by the ConversionFactor.
            </summary>
            <param name="values">The values by reference to convert.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.QuantityConvertor.Convert(System.Double[]@)">
            <summary>
            Multiply each value of values by the ConversionFactor.
            </summary>
            <param name="values">The values by reference to convert.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.QuantityConvertor.Unconvert(System.Double,System.Int32)">
            <summary>
            Divide the value by the ConversionFactor at the power
            given by power.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="power">The power applied to the ConversionFactor.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.QuantityConvertor.Convert(System.Double,System.Int32)">
            <summary>
            Multiply the value by the ConversionFactor at the power
            given by power.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="power">The power applied to the ConversionFactor.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.QuantityConvertor.Unconvert(System.Double)">
            <summary>
            Divide the value by the ConversionFactor.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.QuantityConvertor.Convert(System.Double)">
            <summary>
            Multiply the value by the ConversionFactor.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.QuantityConvertor.Clone">
            <summary>
            Clone the QuantityConvertor.
            </summary>
            <returns>A clone of the QuantityConvertor.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ResultCollector.MakeResultCollector(System.Int32[],System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Use this if the fieldCounts and ids arrays are paired.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ResultCollector.#ctor(System.Int32[],System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Use this if fieldCounts is an independent array indexed by element number and not related to ids
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Utilities.ResultCollector.ImaginaryOffset">
            <summary>
            The offset to apply to Indices to obtain imaginary indices;
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Utilities.ResultCollector.Values">
            <summary>
            Get all values as array.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Utilities.ResultCollector.Ids">
            <summary>
            The ids on which the collector needs results.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Utilities.ResultCollector.Indices">
            <summary>
            The indices of each id in Values.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Utilities.ResultCollector.Lengths">
            <summary>
            The lengths of each id in Values
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Utilities.ResultCollector.HasImaginary">
            <summary>
            Indicate if the collector supports imaginary values.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ResultCollector.ContainsId(System.Int32)">
            <summary>
            Indicates if the id is in the collector ids list.
            </summary>
            <param name="id">The id to check.</param>
            <returns>True if the id is in the collector ids list.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.Utilities.ResultCollector.ComponentCount">
            <summary>
            The number of components per fields.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ResultCollector.FieldCountForId(System.Int32)">
            <summary>
            Returns the number of fields for the given id.
            </summary>
            <param name="id">The id.</param>
            <returns>The number of fields.</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ResultCollector.SetAllValues(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Set all values in the same order as the Ids.
            </summary>
            <param name="values">The values.</param>
            <param name="lengths">The array containing for each element the number of result values.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ResultCollector.SetAllValues(System.Double[],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Set all values in the same order as the Ids.
            </summary>
            <param name="values">The values.</param>
            <param name="lengths">The array containing for each element the number of result values.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ResultCollector.SetValues(System.Int32,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Set the values for the given id.
            </summary>
            <param name="id">The id.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ResultCollector.SetValues(System.Int32,System.Double[])">
            <summary>
            Set the values for the given id.
            </summary>
            <param name="id">The id.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ResultCollector.SetImaginaryValues(System.Int32,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Set the imaginary values for the given id.
            </summary>
            <param name="id">The id.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ResultCollector.SetImaginaryValues(System.Int32,System.Double[])">
            <summary>
            Set the imaginary values for the given id.
            </summary>
            <param name="id">The id.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ResultCollector.Reset">
            <summary>
            Reset all values of the current collector.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.ResultCollector.SetAllIds(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set all the indices with a given list of indices.
            </summary>
            <param name="ids">The indices.</param>
            <param name="lengths">Number of values for each index in ids</param>
        </member>
        <member name="T:Ansys.ACT.Core.Utilities.SelectionInfo">
            <summary>
            SelectionInfo class
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.SelectionInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Utilities.SelectionInfo.#ctor(Ansys.ACT.Interfaces.Common.SelectionTypeEnum)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Math.Vector3DCollection.FindIndexOf(Ansys.ACT.Core.Math.Vector3D)">
            <summary>
            Gets the index of the point that has the same coordinates as the given point.
            </summary>
            <param name="point">The point to search for.</param>
            <returns> The zero-based index of the first occurrence of the element that matches "point" coordinate. /// </returns>
        </member>
        <member name="M:Ansys.ACT.Core.Math.Vector3DCollection.GetAllPointCoordinates">
            <summary>
            Gets all the point coordinates in a flat array (x1, y1, z1, x2....)
            </summary>
            <returns>An array of point coordinates.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.Application.ApplicationAPI.IsReloadingExtensions">
            <summary>
            A flag to indicate whether or not the extension is being reloaded under the debug mode.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Application.ApplicationAPI.InternalCBCallDelegate(System.Action)">
            <summary>
            Calls the callback action with the guarantee it is not performing anything else (not a virtual method).
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Application.ApplicationAPI.ExecuteFile(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            executes the given file in a brand new script scope.
            
            we don't want what was entered into the console to affect the script execution.
            Additionally, the file could contain any crazy thing like "ExtAPI = None" so we
            don't want it to affect the common scope used by the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Application.ApplicationAPI.DefaultScope">
            <summary>
            Gets a default scope containing variables.  This is used by the console.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Application.DataModel.IObjectManager.RegisterObjectDefinition(Ansys.ACT.Core.SimData.SimDataDefinition)">
            <summary>
            Notify the application that a new object type is
            available.
            </summary>
            <param name="definition">The definition of the new object.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Application.DataModel.IObjectManager.UnregisterObjectDefinition(Ansys.ACT.Core.SimData.SimDataDefinition)">
            <summary>
            Notify the application that an object type is
            no more available.
            </summary>
            <param name="definition">The definition of the object.</param>
        </member>
        <member name="T:Ansys.ACT.Core.Callbacks.ICallback">
            <summary>
            Defines the core structure of a user-implemented method that ACT will invoke at upon a specific action or time.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Callbacks.ICallback.Initialize(Microsoft.Scripting.Hosting.ScriptScope,System.Object,System.String,Microsoft.Scripting.Hosting.ObjectOperations)">
            <summary>
            Initializes the callback by setting up appropriate delegates and scope infomration.
            </summary>
            <param name="script">The script scope in which to execute the callback.</param>
            <param name="instance">The object owning the callback.</param>
            <param name="memberName">The member name representing the callback.</param>
            <param name="operations">Script engine-provided operation access.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Callbacks.ICallback.Initialize(Microsoft.Scripting.Hosting.ScriptScope,Ansys.ACT.Core.XmlDataModel.CallbackBase,Microsoft.Scripting.Hosting.ObjectOperations)">
            <summary>
            Initializes the callback by setting up appropriate delegates and scope infomration.
            </summary>
            <param name="script">The script scope in which to execute the callback.</param>
            <param name="dataModel">The XML based data model with which to populate the callback.</param>
            <param name="operations">Script engine-provided operation access.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Callbacks.ICallback.Initialize(Microsoft.Scripting.Hosting.ScriptScope,Ansys.ACT.Core.XmlDataModel.Action,Microsoft.Scripting.Hosting.ObjectOperations)">
            <summary>
            Initializes the callback by setting up appropriate delegates and scope infomration.
            </summary>
            <param name="script">The script scope in which to execute the callback.</param>
            <param name="dataModel">The XML based data model with which to populate the callback.</param>
            <param name="operations">Script engine-provided operation access.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Callbacks.ICallback.Initialize(Microsoft.Scripting.Hosting.ScriptScope,System.Object,System.Reflection.MethodInfo)">
            <summary>
            Initializes the callback by setting up appropriate delegates and scope infomration.
            </summary>
            <param name="script">The script scope in which to execute the callback.</param>
            <param name="instance">The object owning the callback</param>
            <param name="minfo">The reflected method information for the target method.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Callbacks.ICallback.Initialize(Microsoft.Scripting.Hosting.ScriptScope,System.String,System.String,Microsoft.Scripting.Hosting.ObjectOperations)">
            <summary>
            Initializes the callback by setting up appropriate delegates and scope infomration.
            </summary>
            <param name="scope">The script scope in which to execute the callback.</param>
            <param name="functionName">The function name to be used as this callback</param>
            <param name="name">The callback name.</param>
            <param name="operations">Script engine-provided operation access.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Callbacks.ICallback.Initialize(Microsoft.Scripting.Hosting.ScriptScope,Ansys.ACT.Core.XmlDataModel.CallbackBase,System.Reflection.MethodInfo)">
            <summary>
            Initializes the callback by setting up appropriate delegates and scope infomration.
            </summary>
            <param name="script">The script scope in which to execute the callback.</param>
            <param name="dataModel">The XML based data model with which to populate the callback.</param>
            <param name="minfo">The reflected method information for the target method.</param>
        </member>
        <member name="M:Ansys.ACT.Core.Callbacks.ICallback.GetMethodArguments">
            <summary>
            Generated the list of method arguments required to invoke the callback.
            </summary>
            <returns>The method argument list.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.Callbacks.ICallback.IsValid">
            <summary>
            Indicates whether the callback is valid.  Callback invokers should check this flag before calling Invoke.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Callbacks.ICallback.IsGlobal">
            <summary>
            Indicates whether the callback is defined in the global script scope.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Callbacks.ICallback.IsCSharpStatic">
            <summary>
            Indicates whether the callback is defined is a C# S.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Callbacks.ICallback.Invalidate">
            <summary>
            Invalidates the callback and sets the IsValid flag to false.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Callbacks.ICallback.CanInterrupt">
            <summary>
            Indicates whether the callback can be interrupted during execution.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.Callbacks.IOrderedCallback">
            <summary>
            This interface represents an orderable callback.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Callbacks.IOrderedCallback.Order">
            <summary>
            The order of the callback.  Lower order == earlier execution.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.Callbacks.OrderableCallback`1">
            <summary>
            Base class for OderableCallbacks.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Ansys.ACT.Core.Wizards.UserWizard.Name">
            <summary>
            Gets the name of the wizard.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Wizards.UserWizard.Description">
            <summary>
            Gets the description of the wizard.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Wizards.UserWizard.Folder">
            <summary>
            Gets the folder.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Wizards.UserWizard.Filename">
            <summary>
            Gets the filename of the wizard.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Wizards.UserWizard.Extension">
            <summary>
            Gets the associated extension to the wizard.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Wizards.UserWizard.Steps">
            <summary>
            Gets all steps.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Wizards.Wizard.Name">
            <summary>
            Name of the wizard.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Wizards.Wizard.Caption">
            <summary>
            Caption of the wizard.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Wizards.Wizard.Icon">
            <summary>
            Icon of the wizard.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Workflow.Parser.splitTokenList(System.Collections.Generic.List{Ansys.ACT.Core.Workflow.Token},System.Collections.Generic.List{Ansys.ACT.Core.Workflow.TokenType})">
            <summary>
            Given a list of tokens and the type of token that marks the end of a specific entry
            Return several lists of tokens (theoretical entries) that have been split on delim tokens
            </summary>
            <param name="tokens">List of tokens</param>
            <param name="delimList">Collection of tokentypes that mark the end of a theoretical entry</param>
            <returns>List of token lists which represent an entry</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Workflow.Parser.entryBuilder(System.Collections.Generic.List{Ansys.ACT.Core.Workflow.Token},System.Collections.Generic.List{Ansys.ACT.Core.Workflow.TokenType})">
            <summary>
            Splits tokenlist by delimiters and builds entries
            </summary>
            <param name="tokens">List of tokens</param>
            <param name="delimList">Collection of tokentypes that mark the end of an entry</param>
            <returns>List of entries</returns>
        </member>
        <member name="M:Ansys.ACT.Core.Workflow.Parser.separateByPattern(System.Collections.Generic.List{Ansys.ACT.Core.Workflow.Entry})">
            <summary>
            Given a list of entries, group entries into lists by matching tokentype patterns
            </summary>
            <param name="entries">List of entries</param>
            <returns>Entries grouped by pattern</returns>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Application.ActionsView">
            <summary>
            Class defining a panel to be displayed in the application.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Application.ApplicationTaskLink">
            <summary>
            Class defining a new application task link.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.ApplicationTaskLink.From">
            <summary>
            The name of the task where the link come from.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.ApplicationTaskLink.To">
            <summary>
            The name of the task where the link go to.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.BaseTaskTag.Name">
            <summary>
            The name of the task.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.BaseTaskTag.Caption">
            <summary>
            The caption of the task.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Application.UserDefinedTask">
            <summary>
            Class defining a new application task.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.DataModelInOut.Name">
            <summary>
            The name of the data model.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Application.UserInputApplicationTask">
            <summary>
            Class defining a new user input application task.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.UserInputApplicationTask.Panel">
            <summary>
            The panel associated to the task.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.UserInputApplicationTask.DataModels">
            <summary>
            The panel associated to the task.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Application.ProductApplicationTask">
            <summary>
            Class defining a new user input application task.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.ProductApplicationTask.Product">
            <summary>
            The panel associated to the task.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.ProductApplicationTask.DataModels">
            <summary>
            The panel associated to the task.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Application.ApplicationWorkflow">
            <summary>
            Class defining a new application workflow.
            </summary>
            <remarks>
            The name of the application will be a new context available for customization.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.ApplicationWorkflow.Tasks">
            <summary>
            Tasks used by the workflow.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.ApplicationWorkflow.Links">
            <summary>
            Links connecting task in the workflow.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Application.BrowserView">
            <summary>
            Class defining a panel to be displayed in the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.BaseApplication.Name">
            <summary>
            Name of the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.BaseApplication.Caption">
            <summary>
            Caption of the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.BaseApplication.Version">
            <summary>
            Major version of the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.BaseApplication.Contexts">
            <summary>
            Context or combination of contexts (separated using '|'). 
            </summary>
            <remarks>
            This block will be taken into account only for the specified context(s).
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.BaseApplication.Icon">
            <summary>
            Icon for the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.BaseApplication.Description">
            <summary>
            Description of the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.BaseApplication.Callbacks">
            <summary>
            Specifies the callbacks that will invoke functions from the IronPython extension script. 
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.BaseApplication.CanStart">
            <summary>
            Callback that is invoked to determine whether the application can be started.
            </summary>
            <param name="entity">The current step.</param>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Application.CustomApplication">
            <summary>
            Class defining a new application.
            </summary>
            <remarks>
            The name of the application will be a new context available for customization.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.CustomApplication.Class">
            <summary>
            Class name of the controller of the object.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.CustomApplication.ProjectExtName">
            <summary>
            Project extension name for associated project files.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.CustomApplication.OnApplicationStarted">
            <summary>
            Callback that is invoked when the application starts.
            </summary>
            <param name="application">The current analysis.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.CustomApplication.OnApplicationFinished">
            <summary>
            Callback that is invoked  after the application finishes.
            </summary>
            <param name="application">The current analysis.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.CustomApplication.OnProjectLoaded">
            <summary>
            Callback that is invoked when a project is loaded or a new project started.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.CustomApplication.OnBeforeProjectClosed">
            <summary>
            Callback that is invoked before a project is closed.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.CustomApplication.OnBeforeSave">
            <summary>
            Callback that is invoked before a project is saved.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.CustomApplication.Panels">
            <summary>
            Defines one or more panels to be displayed in the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.CustomApplication.Workflow">
            <summary>
            Defines the workflow to be used by the application.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Application.DataModel">
            <summary>
            Class defining a data model.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.DataModel.Name">
            <summary>
            Name of the data model.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.DataModel.Icon">
            <summary>
            Icon of the data model.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Application.DataModelView">
            <summary>
            Class defining a panel to be displayed in the application.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Application.FileToolbarView">
            <summary>
            Class defining a panel to be displayed in the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.View.Name">
            <summary>
            Name of the view.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Application.Panel">
            <summary>
            Class defining a panel to be displayed in the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.Panel.Name">
            <summary>
            Name of the panel.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.Panel.Layout">
            <summary>
            Layout of the panel.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.Panel.Class">
            <summary>
            Class name of the controller of the object.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.Panel.Callbacks">
            <summary>
            Specifies the callbacks that will invoke functions from the IronPython extension script. (Inherited from SimEntity)
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.Panel.OnPanelInitialized">
            <summary>
            Callback that is invoked when the panel is initialized.
            </summary>
            <param name="application">The current analysis.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.Panel.OnPanelShown">
            <summary>
            Callback that is invoked when the panel is shown.
            </summary>
            <param name="application">The current analysis.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.Panel.OnPanelHidden">
            <summary>
            Callback that is invoked when the panel is hidden.
            </summary>
            <param name="application">The current analysis.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.Presentation.Callbacks">
            <summary>
            Specifies the callbacks that will invoke functions from the IronPython extension script. 
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Application.UserObject">
            <summary>
            Class defining a user object of the data model.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.UserObject.Parent">
            <summary>
            Name of the parent user object.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.UserObject.Cardinality">
            <summary>
            Cardinality of the user object regarding is parent.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Application.UserObject.BasedOnXmlDefinition">
            <summary>
            Indicates if the definition of the UserObject is strictly defined by its xml definition.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Action">
            <summary>
            Class defining the action callback.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Action.Name">
            <summary>
            Name of the action callback.
            </summary>
        </member>
        <member name="F:Ansys.ACT.Core.XmlDataModel.Action._caption">
            <summary>
            Caption for the action callback.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Action.Localize">
            <summary>
            Indicates whether the caption and value string need to be localized by the application.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Assembly">
            <summary>
            Class defining the assembly to be loaded.
            </summary>
            <remarks>
            This tag is typically used to import a specific namespace from a C# dll.
            </remarks>
            <example>
            <code type="xml">
            &lt;assembly src="CSharp.dll" namespace="CSharp" /&gt;
            </code>
            </example>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Assembly.Src">
            <summary>
            Name of the dll file to import.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Assembly.Namespace">
            <summary>
            Namespace to import.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Assembly.Context">
            <summary>
            Context or combination of contexts (separated using '|') for the import.
            </summary>
            <remarks>
            This block will be taken into account only for specified context(s).
            </remarks>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Attributes">
            <summary>
            Class defining the set of attributes for the object.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.CallbackBase">
            <summary>
            Class describing a callback to be associated with the parent ACT entity (load, UI item, task, etc.). 
            </summary>
            <remarks>
            There are no attributes. The context (inner XML text) contains the Python function name representing the callback.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.CallbackBase.CanInterrupt">
            <summary>
            Specifies whether the callback can be cancelled/interrupted.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.CallbackBase.IsCSharpStatic">
            <summary>
            Indicates whether the callback is a C Sharp static method.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.CallbackEvaluate">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.CallbackEvaluate.InvokeUIThread">
            <summary>
            Invoke this callback on UIThread or not.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.CallbackGetCommands">
            <summary>
            Class providing the commands to add to the solver input file.
            </summary>
            <remarks>  Use the location attribute to specifiy the execution of the callback.  Options include:
            -init
            -pre
            -post
            -solve
            -preload
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.CallbackGetCommands.Location">
            <summary>
            Location of the call.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.CallbackGetCommands.Order">
            <summary>
            Order of the call.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.CallbackGetCommands.InvokeUIThread">
            <summary>
            Invoke this callback on UIThread or not.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.CallbackGetPostPreSolveCommands">
            <summary>
            Class collecting all commands to add to the solver input file.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.CallbackGetPostPreSolveCommands.TimeDependent">
            <summary>
            Specifies if the callback will be called for each step.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.CallbackGetPostPreSolveCommands.Order">
            <summary>
            Order of the call.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.CallbackOnActiveObjectChange">
            <summary>
            Callback that is invoked  when the active object changes.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.CallbackOnActiveObjectChange.Type">
            <summary>
            The type filter.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.CallbackOnActiveObjectChange.Name">
            <summary>
            The name filter.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.CallbackOnGenerate">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.CallbackOnGenerate.InvokeUIThread">
            <summary>
            Invoke this callback on UIThread or not.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.CallbackOnSolve">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.CallbackOnSolve.InvokeUIThread">
            <summary>
            Invoke this callback on UIThread or not.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Callbacks">
            <summary>
            Class specifying the callbacks that will invoke functions from the IronPython extension script. 
            </summary>
            <remarks>
            The &lt;callbacks&gt; element and its children specify the Python functions that are invoked based on system- and user-generated events.
            </remarks>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.ComponentData">
            <summary>
            Class defining the data for the component.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.ControlTemplate">
            <summary>
            Class defining a control template for the creation of groups of properties.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.ControlTemplate.Name">
            <summary>
            Name of the control template.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.ControlTemplate.Version">
            <summary>
            Version of the control template.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.DataEntity">
            <summary>
            Class defining a custom data entity definition based on an ACT XML Extension file.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DataEntity.DataType">
            <summary>
            Data type representing the schematic-exposed type for which this data entity represents.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.Logfile">
            <summary>
            Provides messages to generate a log file.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.MaximumNumberOfDoubleListParameters">
            <summary>
            Indicates the maximum number of double list parameters supported.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.MaximumNumberOfDoubleParameters">
            <summary>
            Indicates the maximum number of double parameters supported.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.MaximumNumberOfInputParameters">
            <summary>
            Indicates the maximum number of input parameters supported.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.MaximumNumberOfIntegerListParameters">
            <summary>
            Indicates the maximum number of integer list parameters supported.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.OnCreate">
            <summary>
            Callback that is invoked to provide an instance of IOptimizationMethod (or ISamplingMethod).
            </summary>
            <param name="param1">...</param>
            <returns>...</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.OnRelease">
            <summary>
            Callback that is invoked to release the IOptimizationMethod (or the ISamplingMethod) instance.
            </summary>
            <param name="param1">...</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.CanRun">
            <summary>
            Callback that is invoked to indicate whether the optimizer (or sampling) is able to process the optimization (design of experiments) study with its current configuration.
            </summary>
            <param name="param1">...</param>
            <returns>...</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.Description">
            <summary>
            Callback that is invoked to return a user-readable string describing the optimizer and its specific capabilities.
            </summary>
            <param name="param1">...</param>
            <returns>...</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.Configuration">
            <summary>
            Callback that is invoked to return a userreadable string summarizing the current configuration of the optimizer (or the sampling).
            </summary>
            <param name="param1">...</param>
            <returns>...</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.Status">
            <summary>
            Callback that is invoked to return  a user-readable string describing the status of the optimization (or the sampling) resolution.
            </summary>
            <param name="param1">...</param>
            <returns>...</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.QuickHelp">
            <summary>
            Callback that is invoked to return  a user-readable string helping to understand the state of the optimizer (or the sampling) when CanRun is false.
            </summary>
            <param name="param1">...</param>
            <returns>...</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.InputParametersEdited">
            <summary>
            Callback that is invoked when the properties of input parameters have changed.
            </summary>
            <param name="param1">...</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.DesignExplorer.MethodPropertiesEdited">
            <summary>
            Callback that is invoked when the properties of the optimization method have changed.
            </summary>
            <param name="param1">...</param>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Entry">
            <summary> 
            Class defining a drop-down menu within a toolbar.
            </summary>
            <remarks>
            To create a drop-down menu inside a toolbar, an entry has to be created inside another entry.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Entry.Name">
            <summary>
            Name of the entry.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Entry.Caption">
            <summary>
            Caption of the entry.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Entry.UserObject">
            <summary>
            Related user object name.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Entry.Icon">
            <summary>
            Icon of the entry.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Entry.Localize">
            <summary>
            Indicates whether the caption and value string need to be localized by the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Entry.Callbacks">
            <summary>
            Specifies the callbacks that will invoke functions from the IronPython extension script. 
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Entry.OnClick">
            <summary>
            Callback that is invoked to return when the object is clicked.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Extension">
            <summary>
            Class defining an ACT extension.
            </summary>
            <remarks>
            This is the base tag or "root" element under which all other tags/elements fall.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Name">
            <summary>
            Name of the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.MinorVersion">
            <summary>
            Minor version of the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Version">
            <summary>
            Major version of the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Icon">
            <summary>
            Icon for the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Masked">
            <summary>
            Specifies if the extension should be loaded automatically, but hidden in the Extension Manager.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.LoadAsDefault">
            <summary>
            Specifies if the extension should be loaded automatically.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Debug">
            <summary>
            To start this extension in debug mode if in scripted mode.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.ReadPythonFiles">
            <summary>
            Primarly used by the AppBuilder to not read the python file but used file that
            are already read and modified.
            ! Not Public !
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.IsNative">
            <summary>
            Specifies if the extension is native, in that case migration messages are ignored.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.QAServices">
            <summary>
            Specifies if the extension is covered under QA Services applicable by NQA-1
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Author">
            <summary>
            Defines the author of the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Description">
            <summary>
            Defines the description of the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.AppStoreId">
            <summary>
            Defines a unique identifier for the ACT application, to be used in the Ansys Store.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.ImageDirectory">
            <summary>
            Add a folder to find images.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Assemblies">
            <summary>
            Defines one or more assemblies to be loaded.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Guid">
            <summary>
            Defines a unique identifier for the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Licenses">
            <summary>
            Defines a licenses collection for the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Scripts">
            <summary>
            Specifies one or more IronPython scripts referenced by the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.SimDatas">
            <summary>
            Defines one or more general sections that store all user object definitions.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Interfaces">
            <summary>
            Defines one or more the user interfaces for the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Templates">
            <summary>
            Defines a collection of control templates for the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Wizards">
            <summary>
            Defines one or more wizards within the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Applications">
            <summary>
            Defines one or more ACT applications that will be posted to the Ansys Store.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.UIDefinitions">
            <summary>
            Defines one or more user interfaces for the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Extension.Workflows">
            <summary>
            Defines one or more user-defined custom workflows composed of tasks and task groups.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.ExtensionObject">
            <summary>
            Class extending the extension object definition. (Inherited from DesignXplorer SimEntity)
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.ExtensionObject.HostObjectModified">
            <summary>
            Callback that is invoked to return when the properties of host object have changed.
            </summary>
            <param name="param1">...</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.ExtensionObject.Target">
            <summary>
            Defines the target location for the object.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Filter">
            <summary>
            Class defining a filter for the object. The filtering mechanism itself is application specific. 
            </summary>
            <example>
            The following example adds a filter to the &lt;interface/&gt; tag 
            in order to specify the name of an xml file that controls the visibility 
            of Mechanical buttons. The details of the xml file content and associated 
            mechanism are Mechanical specific.
            <br />
            <code type="xml">
            &lt;interface context="Mechanical"&gt;
              &lt;filter name="MainFilter" src="ButtonsVisibility.xml"/&gt;
            &lt;/interface&gt;
            </code>
            </example>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Filter.Name">
            <summary>
            Name of the filter.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Filter.Src">
            <summary>
            Specifies the path of the reference script or resource file.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Geometry">
            <summary>
            Class defining a geometry feature.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Geometry.OnAfterGenerate">
            <summary>
            Callback that is invoked at the end of the generation process.
            </summary>
            <param name="entity">The feature.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Geometry.OnEdit">
            <summary>
            Callback that is invoked  when the object is edited.
            </summary>
            <param name="entity">The feature.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Geometry.OnGenerate">
            <summary>
            Callback that is invoked  when the object is generated.
            </summary>
            <param name="entity">The generated feature.</param>
            <param name="progressFunction">A progress function.</param>
            <returns>True if the generation successed; false otherwise.</returns>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Guid">
            <summary>
            Class defining a unique identifier for the extension.
            </summary>
            <remarks>
            The GUID is he unique identifier of the extension. Two extensions with the same GUID will be considered by ACT as the same extension.<br/>
            This is very important when the extension is deployed to ensure that two different extensions will never be in conflict (have the same name, for example).<br/>
            This identifier must be added at least before the first build of the extension and must never changed after that. When the extension is updated, a new version created, or features added... the GUID must be kept unchanged.<br />
            </remarks>
            <example>
             A GUID can be generated from the project's page command window using the following code:<br />
            <br />
            <code type="python">
            import System
            System.Guid.NewGuid().ToString()
            </code>
            </example>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Guid.ShortId">
            <summary>
            Short identifier for backward compatibility. 
            </summary>
            <remarks>
            Must be the same as the extension name for all extensions created before R15.
            </remarks>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Interface">
            <summary>
            Class defining the user interface for the extension.
            </summary>
            <remarks>
            This interface element information pertains specifically to the GUI.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.Contexts">
            <summary>
            Context or combination of contexts (separated using '|') for the interface. 
            </summary>
            <remarks> This interface block will be taken into account only for specified context(s).
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.LiteAPI">
            <summary>
            Specifies for what context or combinations of contexts (separated using '|') liteAPI should be invoked
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.PropertyEvents">
            <summary>
            Specifies when property events should be invoked.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.Images">
            <summary>
            Defines the default folder where images to be used by the extension are stored.
            </summary>
            <remarks>
            By default, all folders referenced by this tag are relatives to the folder of the extension.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.Toolbars">
            <summary>
            Defines one or more toolbars.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.Filters">
            <summary>
            Defines one or more filters.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.IsAnalysisValid">
            <summary>
            Called to know if an analysis is valid.
            </summary>
            <param name="analysis">The current analysis.</param>
            <param name="firstCheck">True if it's the first check; false otherwise.</param>
            <returns>Returns 1 if the analysis is valid; 0 otherwise.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnAfterSolve">
            <summary>
            Called when an analysis has been solved.
            </summary>
            <param name="analysis">The solved analysis.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnBeforeSolve">
            <summary>
            Called when an analysis starts to solve.
            </summary>
            <param name="analysis">The analysis that starts to solve.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnInit">
            <summary>
            Called when the given context is initialized.
            </summary>
            <param name="context">The name of the initialized context.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnPostFinished">
            <summary>
            Called when the post process end for a given analysis.
            </summary>
            <param name="analysis">The analysis.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnPostStarted">
            <summary>
            Called when the post process start for a given analysis.
            </summary>
            <param name="analysis">The analysis.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnTerminate">
            <summary>
            Called when the given context is terminated.
            </summary>
            <param name="context">The name of the terminated context.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.Resume">
            <summary>
            Called when a project is loaded. Usefull to retreive aditional data. 
            </summary>
            <param name="reader">The stream reader.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.Save">
            <summary>
            Called when a project is saved. Usefull to save aditional data. 
            </summary>
            <param name="writer">The stream writer.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnLoad">
            <summary>
            Called when a project is loaded - invoked from non-Workbench products
            </summary>
            <param name="folder">The folder.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnSave">
            <summary>
            Called when a project is saved - invoked from non-Workbench products
            </summary>
            <param name="folder">The folder.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.GetPreCommands">
            <summary>
            Called to collect all "pre" commands to add to the solver input file.
            </summary>
            <param name="analysis">The current analysis.</param>
            <param name="stream">The stream where the commands have to be written.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.GetPostCommands">
            <summary>
            Called to collect all "post" commands to add to the solver input file.
            </summary>
            <param name="analysis">The current analysis.</param>
            <param name="stream">The stream where the commands have to be written.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.GetSolveCommands">
            <summary>
            Called to collect all "solve" commands to add to the solver input file.
            </summary>
            <param name="analysis">The current analysis.</param>
            <param name="stream">The stream where the commands have to be written.</param>
            <remarks> If timeDependent is true, the callback take as argument : analysis, step, stream</remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnActiveObjectChange">
            <summary>
            Called when the active object change.
            </summary>
            <param name="activeObject">The new active object.</param>
            <param name="location">The location of the new active object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnDraw">
            <summary>
            Called when the application is drawn.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnDraw2D">
            <summary>
            Called when the application is drawn. 
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnBeforeGeometryUpdate">
            <summary>
            OnBeforeGeometryUpdate.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnAfterGeometryUpdate">
            <summary>
            OnAfterGeometryUpdate.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnAfterRemove">
            <summary>
            OnAfterRemove.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnReady">
            <summary>
            OnReady.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnUnitsChanged">
            <summary>
            OnUnitsChanged. Called when the unit system changes.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnBodySuppressStateChange">
            <summary>
            Called when the body suppress state change.
            </summary>
            <param name="bodyId">The id of the body.</param>
            <param name="state">The new state the body.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnMeshCleaned">
            <summary>
            Called when the mesh is cleaned.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.OnMeshGenerated">
            <summary>
            Called when the mesh is generated.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.GetToolTips">
            <summary>
            Collect the GUI Entries ToolTips.
            </summary>
            <param name="name">The name of the entry.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Interface.GetLocalString">
            <summary>
            Get the localized string.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="locale">The locale of the application.</param> 
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.IOItem">
            <summary>
            Class defining a task connection element (input or output).
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.IOItem.Type">
            <summary>
            Connection data type.  
            </summary>
            <remarks>
            Used to specify the input and output exposed object types for a task.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.IOItem.Format">
            <summary>
            Connection format type.  
            </summary>
            <remarks>
            This is used by upstream tasks or your task to determine what 
            "specialized" format should be produced for the more general "Type" property.
            </remarks>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Inputs">
            <summary>
            Class defining the inputs collection for a task.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.InputGroup">
            <summary>
            Class defining the input group collections for a task.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Input">
            <summary>
            Class defining an input-level data connection definition.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Input.Count">
            <summary>
            Maximum number of simultaneous input instances.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Outputs">
            <summary>
            Class defining the outputs collection for a task.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Output">
            <summary>
            Class defining an output-level data connection definition.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.License">
            <summary>
            Class defining a license to be used in the execution of an extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.License.Name">
            <summary>
            Name of the license.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Licenses">
            <summary>
            Class defining a licenses collection for the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Licenses.LicenseCollection">
            <summary>
            A license collection defined for the extension.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Load">
            <summary>
            Class defining a simulation load or boundary.
            </summary>
            <remarks>
            The &lt;load&gt; element and its children allow you to configure the properties
            of a custom load and specify the IronPython functions that are invoked 
            based on system and user-generated events. 
            </remarks>
            <example>
            The following example defines a load applicable to edges.
            <code type="xml">
            &lt;load name="DemoLoad" version="1" caption="DemoLoad" icon="tload" color="#00FFFF"&gt;
              &lt;callbacks&gt;
                &lt;getnodalvaluesfordisplay&gt;NodeValues&lt;/getnodalvaluesfordisplay&gt;
              &lt;/callbacks&gt;
              &lt;property name="Geometry" caption="Geometry" control="scoping"&gt;
                &lt;attributes selection_filter="edge" /&gt;
              &lt;/property&gt;
            &lt;/load&gt;
            </code>
            </example>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Load.Color">
            <summary>
            Color of the scoped entities.
            </summary>
            <remarks>
            The format of the color is the same as for an HTML page. It's #rrggbb where rr is a 2-digit integer in hexadecimal for the red part,
            gg is a 2-digit integer in hexadecimal for the green part, and 
            bb is a 2-digit integer in hexadecimal for the blue part.<br />
            </remarks>
            <example>
            For example:<br/>
            White: #FFFFFF<br/>
            Black: #000000<br/>
            Red: #FF0000<br/>
            Green: #00FF00<br/> 
            Blue: #0000FF<br/> 
            </example>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Load.Unit">
            <summary>
            Default unit used by the contour display.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Load.IsLoad">
            <summary>
            Indicates whether the load object should be considered as a load boundary.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Load.AffectsSolution">
            <summary>
            Indicates whether the load object should affect the solution or not.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Load.IsSupport">
            <summary>
            Indicates whether the load object should be considered as a support boundary.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Load.OnGenerate">
            <summary>
            Callback that is invoked when the load object is generated.
            </summary>
            <param name="load">The load object.</param>
            <param name="progressFunction">A progress function.</param>
            <returns>True if the generation succeeded; false otherwise.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Load.OnAfterGenerate">
            <summary>
            Callback that is invoked  after the generation is completed.
            </summary>
            <param name="load">The generated load object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Load.GetPreCommands">
            <summary>
            Callback that is invoked to collect all "pre" commands to add to the solver input file.
            </summary>
            <param name="load">The load object.</param>
            <param name="stream">The stream where the commands have to be written.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Load.GetSolveCommands">
            <summary>
            Callback that is invoked to collect all "solve" commands to add to the solver input file.
            </summary>
            <param name="load">The load object.</param>
            <param name="stream">The stream where the commands have to be written.</param>
            <remarks> If timeDependent is true, the callback take as argument : analysis, step, stream</remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Load.GetPostCommands">
            <summary>
            Callback that is invoked to collect all "post" commands to add to the solver input file.
            </summary>
            <param name="load">The load object.</param>
            <param name="stream">The stream where the commands have to be written.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Load.GetNodalValuesForDisplay">
            <summary>
            Callback that is invoked to get nodal values associated with the load.
            </summary>
            <param name="load">The load object.</param>
            <param name="nodeIds">The node ids associated to the default scoping.</param>
            <returns>An IEnumerable of Double containing the values for each id in nodeIds. The values have to be in the same order as nodeIds.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Load.GetCommands">
            <summary>
            Callback that is invoked to collect all commands to add to the solver input file.
            </summary>
            <param name="load">The associated load.</param>
            <param name="solverData">The associated solver data.</param>
            <param name="stream">The stream where the commands have to be written.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Load.OnDrawBodyViews">
            <summary>
            Called to collect all commands to add to the solver input file.
            </summary>
            <param name="load">The associated load.</param>
            <param name="view1">The first body view to be associated with this load.</param>
            <param name="view2">The first second view to be associated with this load.</param>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Object">
            <summary>
            Class defining an object.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.Target">
            <summary>
            Defines the target location for the object.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.Color">
            <summary>
            Color of scoped entities.
            </summary>
            <remarks>
            The format of the color is the same as for an HTML page. It's #rrggbb where rr is a 2-digit integer in hexadecimal for the red part,
            gg is a 2-digit  integer in hexadecimal for the green part, and 
            bb is a 2-digit  integer in hexadecimal for the blue part.<br />
            </remarks>
            <example>
            For example:<br/>
            White: #FFFFFF<br/>
            Black: #000000<br/>
            Red: #FF0000<br/>
            Green: #00FF00<br/> 
            Blue: #0000FF<br/> 
            </example>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.Unit">
            <summary>
            Default unit used by the contour display.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.IsLoad">
            <summary>
            Indicates whether the load object should be considered as a load boundary.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.AffectsSolution">
            <summary>
            Indicates whether the load object should affect the solution or not.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.IsSupport">
            <summary>
            Indicates whether the load object should be considered as a support boundary.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.OnGenerate">
            <summary>
            Called when the load object is generated.
            </summary>
            <param name="load">The load object.</param>
            <param name="progressFunction">A progress function.</param>
            <returns>True if the generation succeeded; false otherwise.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.OnAfterGenerate">
            <summary>
            Called when the generation is completed.
            </summary>
            <param name="load">The generated load object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.GetPreCommands">
            <summary>
            Called to collect all "pre" commands to add to the solver input file.
            </summary>
            <param name="load">The load object.</param>
            <param name="stream">The stream where the commands have to be written.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.GetSolveCommands">
            <summary>
            Called to collect all "solve" commands to add to the solver input file.
            </summary>
            <param name="load">The load object.</param>
            <param name="stream">The stream where the commands have to be written.</param>
            <remarks> If timeDependent is true, the callback take as argument : analysis, step, stream</remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.GetPostCommands">
            <summary>
            Called to collect all "post" commands to add to the solver input file.
            </summary>
            <param name="load">The load object.</param>
            <param name="stream">The stream where the commands have to be written.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.GetNodalValuesForDisplay">
            <summary>
            Called to get nodal values associated to the load.
            </summary>
            <param name="load">The load object.</param>
            <param name="nodeIds">The node ids associated to the default scoping.</param>
            <returns>An IEnumerable of Double containing the values for each id in nodeIds. The values have to be in the same order as nodeIds.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.GetCommands">
            <summary>
            Called to collect all commands to add to the solver input file.
            </summary>
            <param name="load">The associated load.</param>
            <param name="solverData">The associated solver data.</param>
            <param name="stream">The stream where the commands have to be written.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Object.OnDrawBodyViews">
            <summary>
            Called to collect all commands to add to the solver input file.
            </summary>
            <param name="load">The associated load.</param>
            <param name="view1">The first body view to be associated with this object.</param>
            <param name="view2">The first second view to be associated with this object.</param>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Optimizer">
            <summary>
            Class defining an optimizer.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.BasedOnDirectOptimizationOnly">
            <summary>
            True if the optimizer is only available in the context of a Direct Optimization component; false otherwise.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.BasedOnResponseSurfaceOnly">
            <summary>
            True if the optimizer is only available in the context of a Response Surface component; false otherwise.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.ConstraintHandling">
            <summary>
            Supports constraint handling.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.ConstraintImportance">
            <summary>
            Supports the Importance property of a constraint.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.ConstraintOnInputParameter">
            <summary>
            Supports constraints defined on an input parameter.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.ConvergenceData">
            <summary>
            Provides convergence data.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.EqualToConstraint">
            <summary>
            Supports the Equal To constraint type.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.GreaterThanConstraint">
            <summary>
            Supports the Greater Than constraint type.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.InsideBoundsConstraint">
            <summary>
            Supports the Inside Bounds constraint type.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.LessThanConstraint">
            <summary>
            Supports the Less Than constraint type.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.MaximizeObjective">
            <summary>
            Supports the Maximize objective type.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.MinimizeObjective">
            <summary>
            Supports the Minimize objective type.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.ObjectiveImportance">
            <summary>
            Supports the Importance property of an objective.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.ObjectiveOnInputParameter">
            <summary>
            Supports objectives defined on an Input Parameter.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.GridIntervalOnInputParameter">
            <summary>
            Supports grid interval defined on an Input Parameter.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.ParameterRelationship">
            <summary>
            Supports parameter relationships.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.SeekObjective">
            <summary>
            Supports the Seek objective type.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.StartingPointRequired">
            <summary>
            Requires a Starting Point.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.HistoryChartXAxisType">
            <summary>
            Defines the X axis type for history charts.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.MaximumNumberOfConstraints">
            <summary>
            Defines the maximum number of constraints supported by the optimizer.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.MaximumNumberOfObjectives">
            <summary>
            Defines the maximum number of objectives supported by the optimizer.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.MinimumNumberOfConstraints">
            <summary>
            Defines the minimum number of constraints required.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.MinimumNumberOfObjectives">
            <summary>
            Defines the minimum number of objectives required.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.ConvergenceDescription">
            <summary>
            Callback that is invoked to return a DXConvergenceDescription object describing the convergence data provided.
            </summary>
            <param name="param1">...</param>
            <returns>...</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.ObjectivesOrConstraintsEdited">
            <summary>
            Callback that is invoked when the definition of objectives or constraints have changed.
            </summary>
            <param name="param1">...</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Optimizer.ParameterRelationshipsEdited">
            <summary>
            Callback that is invoked when the definition of parameter relationships have changed.
            </summary>
            <param name="param1">...</param>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.OrderableCallback">
            <summary>
            A callback that supports an order specification.  Used when multiple callbacks could apply to
            the same entity, allowing a proper "sorting" of execution.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.OrderableCallback.Order">
            <summary>
            The order "priority".  The lower the order, the earlier the execution.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.ParameterUsage">
            <summary>
            Parameter usage options.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.ParameterDataType">
            <summary>
            Parameter data-type options.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Parameters">
            <summary>
            Class defining the collection of task parameters.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Parameter">
            <summary>
            Class defining a single parameter definition for a task.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Parameter.Usage">
            <summary>
            Usage of the parameter.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Parameter.Control">
            <summary>
            Underlying data type of the parameter.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Property">
            <summary>
            Class defining a property of any user object.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Property.PropertyControl">
            <summary>
            Control type of the object.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.Name">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.Caption">
            <summary>
            Caption of the property.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.Persistent">
            <summary>
            Specifies the property persistence (workflow).  Indicates whether the property data should be saved within the project.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.Parameterizable">
            <summary>
            Specifies the property parameterization (workflow).  Indicates whether the property should be a candidate for parameterization (in the schematic property view, a check-box will appear).
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.KeyType">
            <summary>
            Property dictionary key type (workflow).
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.ValueType">
            <summary>
            Property dictionary value type (workflow).
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.ElementType">
             <summary>
            Property list element type (workflow).
             </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.Class">
            <summary>
            Class name of the property's controller.
            </summary>
            <remarks>
            The constructor of the class referenced by this attribute takes three arguments:<br/>
            <ul>
                <li>The ExtAPI variable (of type IMechanicalExtAPI)</li>
                <li>The load associated to the property (of type IUserObject)</li>
                <li>The associated property (of type ISimProperty)</li>
            </ul>
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.Default">
            <summary>
            Default value of the property.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.NeedUpdate">
            <summary>
            Indicates whether the context must be refreshed when the property value changes.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.Readonly">
            <summary>
            Indicates whether the property is read-only.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.Unit">
            <summary>
            Unit type of the property (for 'control' equals to 'float' only).
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.Visible">
            <summary>
            Indicates whether the property is visible.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.VisibleOn">
            <summary>
            Specifies property visibility.  With a PropertyGroup parent of control type "select", 
            indicates the select values for this property to be visible (separate with '|').
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.IsParameter">
            <summary>
            Indicates whether the property is a parameter.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.Localize">
            <summary>
            Indicates whether the caption and value string need to be localized by the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnMigrate">
            <summary>
            Callback that is invoked when the property version has been changed. 
            </summary>
            <remarks>
            This callback allows the migration of data
            from the old saved property to the new one.
            </remarks>
            <param name="newEntity">The newly created property.</param>
            <param name="oldEntity">The old saved property.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnActivate">
            <summary>
            Callback that is invoked  when the property is activated.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The activated property.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnValidate">
            <summary>
            Callback that is invoked  when the property is validated.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The validated property.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnApply">
            <summary>
            Callback that is invoked  when the property apply button is clicked.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The property.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnCancel">
            <summary>
            Callback that is invoked  when the property cancel button is clicked.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The property.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnButtonClick">
            <summary>
            Callback that is invoked when click on a property's button
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.Value2String">
            <summary>
            Callback that is invoked to convert the value stored by the property into a string.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The property.</param>
            <param name="value">The property value.</param>
            <returns>The String value.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.String2Value">
            <summary>
            Callback that is invoked to convert a string to the property value.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The property.</param>
            <param name="str">The String value.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.IsValid">
            <summary>
            Callback that is invoked to determine whether the property is valid.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The property to check.</param>
            <returns>True if the property is valid; false otherwise.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.IsVisible">
            <summary>
            Callback that is invoked to determine whether the property is visible.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The property to check.</param>
            <returns>True if the property is visible; false otherwise.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.GetValue">
            <summary>
            Callback that is invoked when the property value is acquired. 
            </summary>
            <remarks>
            This callback is useful for transforming the stored property value.
            </remarks>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The property.</param>
            <param name="value">The stored property value.</param>
            <returns>The transformed value.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.SetValue">
            <summary>
            Callback that is invoked  when the property value is set. 
            </summary>
             /// <remarks>
            This callback is useful for transforming the submitted property value.
            </remarks>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The property.</param>
            <param name="value">The submited value.</param>
            <returns>The transformed value.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnInit">
            <summary>
            Callback that is invoked when the property is initialized.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The initialized property.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnDuplicate">
            <summary>
            Callback that is invoked when the property is duplicated.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The duplicated property.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnShow">
            <summary>
            Callback that is invoked when the property is shown.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The shown property.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnHide">
            <summary>
            Callback that is invoked when the property is hidden.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The hidden property.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnAdd">
            <summary>
            Callback that is invoked when the property is added.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The added property.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnRemove">
            <summary>
            Callback that is invoked when the property is removed.
            </summary>
            <param name="entity">The entity containing the property.</param>
            <param name="property">The removed property.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnBodySuppressStateChange">
            <summary>
            Callback that is invoked when the body suppress state change.
            </summary>
            <param name="bodyId">The id of the body.</param>
            <param name="state">The new state the body.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnAfterGeometryUpdate">
            <summary>
            Callback that is invoked after the geometry has been updated.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnJournalRecording">
            <summary>
            Callback that is invoked before writting the journal for an action.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyBase.OnJournalExecuting">
            <summary>
            Callback that is invoked before executing an action written in the journal.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.PropertyGroup">
            <summary>
            Class defining a collection of properties.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyGroup.Display">
            <summary>
            Display type of the property group.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyGroup.PropertyGroupControl">
            <summary>
            Control type of the object.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.PropertyNativeTable">
            <summary>
            Class encapsulating a list of child properties under one table.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyNativeTable.AllowEmpty">
            <summary>
            Unit type of the property (for float control).
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyNativeTable.Display">
            <summary>
            Display type of the property group.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyNativeTable.PropertyNativeTableControl">
            <summary>
            Control type of the object.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.PropertyTable">
            <summary>
            Class encapsulating a list of child properties under one table.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyTable.AllowEmpty">
            <summary>
            Unit type of the property (for float control).
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyTable.Display">
            <summary>
            Display type of the property table.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.PropertyTable.PropertyTableControl">
            <summary>
            Control type of the property table (e.g. tabulardata, custom, etc.)
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Result">
            <summary>
            Class defining a result.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.Location">
            <summary>
            Location of the result.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.Type">
            <summary>
            Type of the result.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.Unit">
            <summary>
            Unit used by the contour display.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.Averaging">
            <summary>
            Averaging of the result.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.HasImaginary">
            <summary>
            Indicates whether the result supports imaginary values.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.TimeHistory">
            <summary>
            Indicates whether the time history has to be calculated.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.IsContactResult">
            <summary>
            Indicates whether the result object should be considered as a contact result or not.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.GetValue">
            <summary>
            Callback that is invoked to get the values associated to a node or an element given by its ID.
            </summary>
            <param name="entity">The result object.</param>
            <param name="meshId">The element or node id.</param>
            <returns>An Enumerable of Double containing the result values for the given meshId.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.OnStartEval">
            <summary>
            Callback that is invoked when the evaluation process for a given step starts.
            </summary>
            <param name="entity">The result object.</param>
            <param name="step">The evaluated step.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.OnEndEval">
            <summary>
            Callback that is invoked at the end of the evaluation process for a given step.
            </summary>
            <param name="entity">The result object.</param>
            <param name="step">The evaluated step.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.Evaluate">
            <summary>
            Callback that is invoked when the step described by stepInfo is evaluated.
            </summary>
            <param name="entity">The result object.</param>
            <param name="stepInfo">The stepInfo.</param>
            <param name="collector">The collector.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.GetFieldCount">
            <summary>
            Callback that is invoked to get the number of fields (ie components) for a given element or node ID.
            </summary>
            <param name="entity">The result object.</param>
            <param name="meshId">The element or node id.</param>
            <returns>The number of field for the given id.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.OnStartPost">
            <summary>
            Callback that is invoked when the post process starts.
            </summary>
            <param name="entity">The result object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Result.OnEndPost">
            <summary>
            Callback that is invoked at the end of the post process.
            </summary>
            <param name="entity">The result object.</param>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.RsmJob">
            <summary>
            This class defines an rsm job.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.RsmJob.OnCreateJobInput">
            <summary>
            This callback handles the generation of all input files defined on the rsm job.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.RsmJob.OnJobStatus">
            <summary>
            This callback handles the status polling engaged by the Framework.  Return True to indicate the job has completed.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.RsmJob.OnJobCancellation">
            <summary>
            This callback handles a user-invoked job cancellation.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.RsmJob.OnJobReconnect">
            <summary>
            This callback handles the reconnection of the rsm job.  The implementor must update the task data model
            to deem the task as up-to-date.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.RsmJob.Programs">
            <summary>
            The programs to run by the rsm job.  Currently only one program per job allowed.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.RsmJob.InputFiles">
            <summary>
            The job input files.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.RsmJob.OutputFiles">
            <summary>
            The job output files.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.RsmJob.DeleteFiles">
            <summary>
            Indicates whether ACT should delete all rsmJob input and output files  upon successful completion or job cancellation.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.XmlDataModel.RsmJob.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Program">
            <summary>
            This class defines the Program XML Tag.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Program.Arguments">
            <summary>
            The program's command-line arguments.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Program.Platforms">
            <summary>
            The program's supported platforms.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.XmlDataModel.Program.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Platform">
            <summary>
            This class defines the Platform XML Tag.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Platform.Name">
            <summary>
            The platform name.  May be "Win64" or "Linux64"
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Platform.Path">
            <summary>
            The platform-supported path (e.g., to an exe)
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.XmlDataModel.Platform.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.XmlDataModel.Platform.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The platform name.</param>
            <param name="path">The platform path.</param>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Argument">
            <summary>
            This class defines the Argument XML Tag.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Argument.Name">
            <summary>
            The argument name.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Argument.Value">
            <summary>
            The argument value.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Argument.Separator">
            <summary>
            The argument-value separator.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.File">
            <summary>
            This class defines the base File XML Tag.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.File.Name">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.File.Id">
            <summary>
            The unique file id.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.InputFile">
            <summary>
            This class difines the InputFile XML Tag.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.OutputFile">
            <summary>
            This class defines the OutputFile XML Tag.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Sampling">
            <summary>
            Class defining a DesignXplorer Sampling.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Sampling.CustomTable">
            <summary>
            Supports custom table points.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Script">
            <summary>
            Specifies the IronPython script referenced by the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Script.Filename">
            <summary>
            Name of the Python script file.
            </summary>
            <remarks>
            By default, all folders referenced by this attribute are relatives to the folder of the extension.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Script.Compiled">
            <summary>
            Specifies whether the script will be compiled as a binary file.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Separator">
            <summary>
            Class defining the separator for items in a toolbar.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.SimData">
            <summary>
            Class defining a general section that stores all user object definitions.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimData.Contexts">
            <summary>
            Context or combination of contexts (separated using '|').  
            </summary>
            <remarks>
            This block will be taken into account only for the specified context(s).
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.Name">
            <summary>
            Name of the object.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.Version">
            <summary>
            Version of the object.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.Caption">
            <summary>
            Caption of the object.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.Contextual">
            <summary>
            Indicates whether the object has to be displayed in the contextual menu.
            </summary>
            <remarks>
            By default, the contextual flag is true for "load", "result" and "object".
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.BeginGroup">
            <summary>
            Indicates whether the load object will have a separator before it when shown in the context menu.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.ContextGroup">
            <summary>
            Indicates which group the load will be shown in the context menu.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.Class">
            <summary>
            Class name of the controller of the object.
            </summary>
            /// <remarks>
            The constructor of the class referenced by this attribute takes two arguments:<br/>
            <ul>
                <li>The ExtAPI variable (of type IMechanicalExtAPI)</li>
                <li>The associated load (of type IUserLoad)</li>
            </ul>
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.Icon">
            <summary>
            Icon for the object.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.Localize">
            <summary>
            Indicates whether the caption and value string need to be localized by the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.LazyActivateSelectProperties">
            <summary>
            Determines when onActivate callback is called for the properties.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.CanAdd">
            <summary>
            Callback that is invoked to determine whether the object can be added.
            </summary>
            <param name="parent">The location where the object wants to be added.</param>
            <param name="objectName">The object name.</param>
            <returns>True if the object can be added; false otherwise.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.CanDuplicate">
            <summary>
            Callback that is invoked to determine if the object can be duplicated.
            </summary>
            <param name="entity">The object to duplicate.</param>
            <param name="parent">The location where the object wants to be duplicated.</param>
            <returns>True if the object can be duplicated; false otherwise.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.CanRemove">
            <summary>
            Callback that is invoked to determine if the object can be removed.
            </summary>
            <param name="entity">The object to remove.</param>
            <returns>True if the object can be removed; false otherwise.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.IsValid">
            <summary>
            Callback that is invoked to determine if the object is valid.
            </summary>
            <param name="entity">The object to check.</param>
            <returns>True if the object is valid; false otherwise.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnMigrate">
            <summary>
            Callback that is invoked when the object version has been changed. 
            </summary>
            <remarks>
            It enables the migration of data from the old saved object to the new one.
            </remarks>
            <param name="newEntity">The newly created object.</param>
            <param name="oldEntity">The old saved object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnSuppress">
            <summary>
            Callback that is invoked when the object is suppressed.
            </summary>
            <param name="entity">The suppressed object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnUnsuppress">
            <summary>
            Callback that is invoked when the object is unsuppressed.
            </summary>
            <param name="entity">The unsuppressed object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnAdd">
            <summary>
            Callback that is invoked when the object is newly added.
            </summary>
            <remarks>
            This callback is not invoked when the project is reopened.
            </remarks>
            <param name="entity">The newly created object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnRemove">
            <summary>
            Callback that is invoked when the object is removed.
            </summary>
            <param name="entity">The removed object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnShow">
            <summary>
            Callback that is invoked when the object is shown.
            </summary>
            <param name="entity">The show object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnHide">
            <summary>
            Callback that is invoked when the object is hidden.
            </summary>
            <param name="entity">The hidden object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnInit">
            <summary>
            Callback that is invoked when the object is initialized. 
            </summary>
            <remarks>
            This callback is called after the OnAdd callback and when the project is reopened.
            </remarks>
            <param name="entity">The initialized object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnDuplicate">
            <summary>
            Callback that is invoked when the object is duplicated.
            </summary>
            <param name="entity">The duplicated object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnClearData">
            <summary>
            Callback that is invoked when object data are cleared.
            </summary>
            <param name="entity">The cleared object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnGenerateData">
            <summary>
            Callback that is invoked when object data are generated.
            </summary>
            <param name="entity">The generated object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnReady">
            <summary>
            Callback that is invoked when the application is fully loaded and in a "ready" state. (Inherited from SimEntity)
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnBodySuppressStateChange">
            <summary>
            Callback that is invoked when the body suppress state changse.
            </summary>
            <param name="bodyId">The ID of the body.</param>
            <param name="state">The new state the body.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.SimEntity.OnAfterGeometryUpdate">
            <summary>
            Callback that is invoked when the geometry has been updated.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Solver">
            <summary>
            Class specifying a third-party solver to be used in the simulation.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Solver.Analysis">
            <summary>
            Type of analysis.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Solver.Physics">
            <summary>
            Type of physics.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Solver.Toolbox">
            <summary>
            Name of the toolbox.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Solver.EvaluateFunctionLoads">
            <summary>
            Name of the toolbox.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Solver.OnSolve">
            <summary>
            Callback that is invoked when the solve process is run.
            </summary>
            <param name="entity">The solver object.</param>
            <param name="progressFunction">A progress function.</param>
            <returns>Returns true if the solve succeeded; false otherwise.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Solver.OnCheckResults">
            <summary>
            Callback that is invoked before any post-processing evaluation.
            </summary>
            <param name="entity">The solver object.</param>
            <returns>Returns true if results can be evaluated, false otherwise.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Solver.OnBeforeSolve">
            <summary>
            Callback that is invoked before the solve process.
            </summary>
            <param name="entity">The solver object.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Solver.OnWriteInputFile">
            <summary>
            Callback that is invoked to write the solver input file.
            </summary>
            <remarks>
            This callback is called after "OnBeforeSolve" and before "OnSolve" in a full solve process.<br/>
            If the user ask only to write the input file, the callback will be called after "OnBeforeSolve".
            </remarks>
            <param name="entity">The solver object.</param>
            <param name="filename">The name of the input file.</param>
            <returns>Returns true if the fil has been written without error, false otherwise.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Solver.IsAnalysisValid">
            <summary>
            Callback that is invoked to determine whether the analysis is valid.
            </summary>
            <param name="entity">The solver object.</param>
            <param name="firstCheck">True if it is the first check; false otherwise.</param>
            <returns>1 if the analysis is valid; 0 otherwise.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Solver.GetSteps">
            <summary>
            Callback that is invoked to get the list of time steps (or frequencies) that were computed 
            during the solve and are available for the post-processing.
            </summary>
            <param name="entity">The solver object.</param>
            <returns>The time steps or frequencies.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Solver.GetFiles">
            <summary>
            Callback that is invoked to return a list of file strings used by a custom solver.
            </summary>
            <param name="entity">The solver object.</param>
            <returns>The files.</returns>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Solver.GetReader">
            <summary>
            Callback that is invoked to get the reader class name and associated options.
            </summary>
            <param name="entity">The solver object.</param>
            <returns>An Enumerable of String containing in first position the name of the class extending ICustomReader and then, some optional data.</returns>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Step">
            <summary>
            Class defining a step in a guided process a (wizard or AIM custom template).
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Step.ComponentDatas">
            <summary>
            Data of the components in the step's layout.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Step.ComponentStyles">
            <summary>
            Styles of the components in the step's layout.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Step.Context">
            <summary>
            Gets or sets the context name.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Step.HelpFile">
            <summary>
            File containing help HTML content.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Step.Description">
            <summary>
            Gets or sets the description of the step.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Step.Layout">
            <summary>
            Gets or sets the layout to use for this step.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Step.Enabled">
            <summary>
            Gets or sets the Enabled flag. 
            </summary>
            <remarks>
            This flag is true by default.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Step.Refresh">
            <summary>
            Callback that is invoked when the step is initialized.
            </summary>
            <param name="entity">The current step.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Step.Update">
            <summary>
            Callback that is invoked when the step is finalized.
            </summary>
            <param name="entity">The current step.</param>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Step.Reset">
            <summary>
            Callback that is invoked when we return to the previous step.
            </summary>
            <param name="entity">The current step.</param>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Target">
            <summary>
            Class defining  the target location for the object.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Target.Type">
            <summary>
            Type of the target location.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Target.Location">
            <summary>
            Sub-type of the target location when ype==Analysis.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Target.Name">
            <summary>
            Name of the parent. 
            </summary>
            <remarks>
            This is the name of an object defined in the extension XML file.
            Used only if type==UserObject.
            </remarks>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Tasks">
            <summary>
            Class defining the tasks collection.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Task">
            <summary>
            Class defining a task that encapsulates a single process or application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.OnInitialize">
            <summary>
            Callback that is invoked for task creation.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.OnLoad">
            <summary>
            Callback that is invoked when a task is loaded from disk.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.OnUpdate">
            <summary>
            Callback that is invoked for task update.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.OnRefresh">
            <summary>
            Callback that is invoked for task refresh.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.OnReset">
            <summary>
            Callback that is invoked for task reset.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.OnClean">
            <summary>
            Callback that is invoked for task cleaning.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.OnEdit">
            <summary>
            Callback that is invoked for task EDIT entry.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.OnStatus">
            <summary>
            Callback that is invoked for task status.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.OnReport">
            <summary>
            Callback that is invoked for task reporting.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.OnDelete">
            <summary>
            Callback that is invoked for task deletion.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.CanConsumeData">
            <summary>
            Callback that is invoked for task connection/consumption.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.EnableGenericTransfer">
            <summary>
            Indicates whether or not the task should expose the general transfer type as an output.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.ContextMenuEntries">
            <summary>
            The user-defined custom context menu entries.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.Inputs">
            <summary>
            User-defined task input connections.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.Outputs">
            <summary>
            User-defined task output connections.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.Parameters">
            <summary>
            User-defined parameters to be exposed on the task.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.RsmJob">
            <summary>
            List of task-level RSM Jobs.  
            </summary>
            <remarks>
            Currently only one entry is allowed.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Task.EditIcon">
            <summary>
            Name of the icon to display when an onedit callback is defined.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.TaskGroups">
            <summary>
            Class defining the task groups collection.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.TaskGroup">
            <summary>
            Class defining a collection of tasks.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.TaskGroup.Category">
            <summary>
            Category to which the task group applies.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.TaskGroup.Abbreviation">
            <summary>
            Task group abbreviation used for directory and naming purposes.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.TaskGroup.IsParametricGroup">
            <summary>
            Indicates whether the taskgroup operates only on parameters.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.TaskGroup.HeaderText">
            <summary>
            The text to display in the both the toolbox and the task group header block.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.TaskGroup.Tasks">
            <summary>
            List of tasks for the task group.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.TaskGroup.Groups">
            <summary>
            The task group's List of nested task groups.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.IncludeTag">
            <summary>
            Class definining the base include tag.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.IncludeTag.Name">
            <summary>
            Name of the item to include.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.IncludeTag.Caption">
            <summary>
            The caption of the item to include.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.IncludeTag.External">
            <summary>
            Indicates whether the included item is defined outside of the extension file.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.IncludeTask">
            <summary>
            Class defining the include task tag (used by task groups).
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.IncludeGroup">
            <summary>
            Class defining the include group tag (used by task groups).
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Templates">
            <summary>
            Class defining a collection of control templates.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Templates.ControlTemplates">
            <summary>
            Defines a control template for the creation of groups of properties.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Toolbar">
            <summary>
            Class defining a toolbar in the UI of the application.
            </summary>
            <example>
            The following example defines a toolbar with two entries.
            <br />
            <code type="xml">
            &lt;toolbar name="TestToolbar" caption="Test Toolbar"&gt;
              &lt;entry name="Entry 1" icon="icon1"&gt;
              &lt;/entry&gt;
              &lt;entry name="Entry 2" icon="icon2"&gt;
              &lt;/entry&gt;
            &lt;/toolbar&gt;
            </code>
            </example> 
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Toolbar.Name">
            <summary>
            Name of the toolbar.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Toolbar.Caption">
            <summary>
            Caption of the toolbar.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Toolbar.Localize">
            <summary>
            Indicates whether the caption and value string need to be localized by the application.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Toolbar.Entries">
            <summary>
            Separator for the toolbar.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Udf">
            <summary>
            Specifies the UDF folder referenced by the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Udf.FolderPath">
            <summary>
            The path of the UDF folder.
            </summary>
            <remarks>
            The path referenced by this attribute is relative to the folder of the extension.
            </remarks>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.UIEntryType">
            <summary>
            GUI Operation type options.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.UIEntry">
            <summary>
            Class defining a user-interface GUI operatio.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UIEntry.OnClick">
            <summary>
            Callback that is invoked on click.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UIEntry.Priority">
            <summary>
            UI-level priority (for grouping and ordering purposes)
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UIEntry.Type">
            <summary>
            Type of GUI operation.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UIEntry.Name">
            <summary>
            Name of GUI operation.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UIEntry.Caption">
            <summary>
            Display text of GUI operation.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UIEntry.Version">
            <summary>
            Version of GUI operation...for backwards compatiblity
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UIEntry.Icon">
            <summary>
            Icon for the object.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UIEntry.Callbacks">
            <summary>
            Callbacks
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Wizard">
            <summary>
            Class defining a guided process (a wizard or AIM custom template) within the extension.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Wizard.Layout">
            <summary>
            Layout to be used to display the wizard.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Wizard.Subcontext">
            <summary>
            Sub-context used by AIM to filter the availability of the wizard.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.Workflow">
            <summary>
            Class defining the top-level workflow tag within an ACT app.      
            </summary>
            <remarks>
            Used to define process integration items (tasks and task groups)
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.Contexts">
            <summary>
            Contexts (application) to which this workflow applies.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.Tasks">
            <summary>
            Tasks xposed by this workflow.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.TaskGroups">
            <summary>
            Task groupings to be exposed as organized blocks within the workflow.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnBeforeDesignPointChanged">
            <summary>
            Callback that is invoked immediately before the design point changes.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnAfterDesignPointChanged">
            <summary>
            Callback that is invoked after the design point has changed.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnBeforeTaskReset">
            <summary>
            Callback that is invoked before a task is reset.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnAfterTaskReset">
            <summary>
            Callback that is invoked after a task has been reset.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnBeforeTaskRefresh">
            <summary>
            Callback that is invoked before a task is refreshed.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnAfterTaskRefresh">
            <summary>
            Callback that is invoked after a task has been refreshed.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnBeforeTaskUpdate">
            <summary>
            Callback that is invoked before a task is updated.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnAfterTaskUpdate">
            <summary>
            Callback that is invoked after a task has been updated.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnBeforeTaskDuplicate">
            <summary>
            Callback that is invoked before a task is duplicated.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnAfterTaskDuplicate">
            <summary>
            Callback that is invoked after a task has been duplicated.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnBeforeTaskSourcesChanged">
            <summary>
            Callback that is invoked before a task handles a source change.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnAfterTaskSourcesChanged">
            <summary>
            Callback that is invoked after a task handles a source change.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnBeforeTaskCreation">
            <summary>
            Callback that is invoked before a task is created.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnAfterTaskCreation">
            <summary>
            Callback that is invoked after a task has been created.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnBeforeTaskDeletion">
            <summary>
            Callback that is invoked before a task is deleted.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnAfterTaskDeletion">
            <summary>
            Callback that is invoked after a task is deleted.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnBeforeTaskCanUseTransfer">
            <summary>
            Callback that is invoked before a task determines transfer data viability.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnAfterTaskCanUseTransfer">
            <summary>
            Callback that is invoked after a task determines transfer data viability.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnBeforeTaskCanDuplicate">
            <summary>
            Callback that is invoked before a task determines duplication viability.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnAfterTaskCanDuplicate">
            <summary>
            Callback that is invoked after a task determines duplication viability.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnBeforeTaskStatus">
            <summary>
            Callback that is invoked before a task determines its status.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnAfterTaskStatus">
            <summary>
            Callback that is invoked after a task determines its status.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnBeforeTaskPropertyRetrieval">
            <summary>
            Callback that is invoked before a task provides its property-containing objects.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.Workflow.OnAfterTaskPropertyRetrieval">
            <summary>
            CCallback that is invoked after a task provides its property-containing objects.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.UI.Component">
            <summary>
            Class defining a new component in a layout.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.Name">
            <summary>
            Name of the component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.Visible">
            <summary>
            Initial visibility of the component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.LeftAttachment">
            <summary>
            Left attachment of the layout. 
            </summary>
            <remarks>
            The value can be the name of a component or "" for the border.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.LeftOffset">
            <summary>
            Left offset related to the left attachment.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.TopAttachment">
            <summary>
            Top attachment of the layout.
            </summary>
            <remarks>
            The value can be the name of a component or "" for the border.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.TopOffset">
            <summary>
            Top offset related to the top attachment.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.RightAttachment">
            <summary>
            Right attachment of the layout. 
            </summary>
            <remarks>
            The value can be the name of a component or "" for the border.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.RightOffset">
            <summary>
            Right offset related to the right attachment.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.BottomAttachment">
            <summary>
            Bottom attachment of the layout. 
            </summary>
            <remarks>
            The value can be the name of a component or "" for the border.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.BottomOffset">
            <summary>
            Bottom offset related to the bottom attachment.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.HeightType">
            <summary>
            Height type for the component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.HeightValue">
            <summary>
            Height value for the component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.MaxHeight">
            <summary>
            Maximum height for the component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.MinHeight">
            <summary>
            Minimum height for the component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.WidthType">
            <summary>
            Width type for the component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.WidthValue">
            <summary>
            Width value for the component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.MaxWidth">
            <summary>
            Maximum width for the component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.MinWidth">
            <summary>
            Minimum width for the component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.ComponentType">
            <summary>
            Type of the component for the component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.CustomCSSFile">
            <summary>
            Custom css file for the component layout. 
            </summary>
            <remarks>
            This file will be taken in place of the standard one associated to the component.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.CustomHTMLFile">
            <summary>
            Custom html file for the component layout.
            </summary>
            <remarks>
            This file will be taken in place of the standard one associated to the component.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.CustomJSFile">
            <summary>
            Custom jscript file for the component layout. 
            </summary>
            <remarks>
            This file will be taken in place of the standard one associated to the component.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Component.Attributes">
            <summary>
            Defines the set of attributes for the component.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.UI.ComponentDefinition">
            <summary>
            Class defining the display of the component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.ComponentDefinition.Name">
            <summary>
            Name of the component definition. 
            </summary>
            <remarks>
            This will identify the component type.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.ComponentDefinition.Directory">
            <summary>
            Directory where are located HTML, CSS and JS files
            </summary>
            <remarks>
            By default it is the directory of the extension if defined in an extension and "...ACT/html" if not.
            </remarks>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.ComponentDefinition.CSSFile">
            <summary>
            Default CSS file to use for this component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.ComponentDefinition.HTMLFile">
            <summary>
            Default HTML file to use for this component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.ComponentDefinition.JSFile">
            <summary>
            Default JS file to use for this component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.ComponentDefinition.Class">
            <summary>
            Class to control this component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.ComponentDefinition.DataModelClass">
            <summary>
            Class type that describes the data model of the component
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.UI.Layout">
            <summary>
            Class defining the a new panel layout.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Layout.Name">
            <summary>
            Name of the layout.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.UI.Layout.Components">
            <summary>
            Defines the component for which the panel layout is being defined.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.UI.UIDefinition">
            <summary>
            Class defining a set of interface layouts that can be used for guided processes (wizards).
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.XmlDataModel.ComponentStyle">
            <summary>
            Class defining the styles for the component.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.ComponentStyle.ComponentName">
            <summary>
            Name of the component for which styles are being defined.
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.XmlDataModel.ComponentStyle.Filter">
            <summary>
            Filter for the component styles.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example>
            <code>
            [LocalizationRequiredAttribute(true)]
            public class Foo
            {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="M:Ansys.ACT.Core.Properties.LocalizationRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ansys.ACT.Core.Properties.LocalizationRequiredAttribute"/> class with
            <see cref="P:Ansys.ACT.Core.Properties.LocalizationRequiredAttribute.Required"/> set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Properties.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ansys.ACT.Core.Properties.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="P:Ansys.ACT.Core.Properties.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="M:Ansys.ACT.Core.Properties.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:Ansys.ACT.Core.Properties.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ansys.ACT.Core.Properties.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:Ansys.ACT.Core.Properties.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
            <example>
            <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args)
            {
              //Do something
            }
            public void Foo()
            {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:Ansys.ACT.Core.Properties.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:Ansys.ACT.Core.Properties.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one of the parameters
            of the caller function.
            For example, ReSharper annotates the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example>
            <code>
            public void Foo(string param)
            {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example>
             <code>
             public class Foo : INotifyPropertyChanged
             {
               public event PropertyChangedEventHandler PropertyChanged;
            
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName)
               {}
            
               private string _name;
               public string Name
               {
                 get { return _name; }
                 set
                 {
                   _name = value;
                   NotifyChanged("LastName"); // Warning
                 }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() => Property)</c></item>
             <item><c>NotifyChanged((VM x) => x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes, 
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
            <code>
            [CanBeNull]
            public object Test()
            {
              return null;
            }
            
            public void UseTest()
            {
              var p = Test(); 
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException' 
            }
            </code>
            </example>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example>
            <code>
            [NotNull]
            public object Foo()
            {
              return null; // Warning: Possible 'null' assignment
            } 
            </code>
            </example>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted. <br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output means that the methos doesn't return normally. <br/>
            <c>canbenull</c> annotation is only applicable for output parameters. <br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute with rows separated by semicolon. <br/>
            </syntax>
            <examples>
            <list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // Regular Assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list>
            </examples>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c> should be used instead.
            However, using '==' or '!=' for comparison with <c>null</c> is always permitted.
            </summary>
            <example>
            <code>
            [CannotApplyEqualityOperator]
            class NoEquality
            {
            }
            
            class UsesNoEquality
            {
              public void Test()
              {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
            
                if (ca1 != null) // OK
                {
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked with 
            the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:Ansys.ACT.Core.Properties.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:Ansys.ACT.Core.Properties.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Properties.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:Ansys.ACT.Core.Properties.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="F:Ansys.ACT.Core.Properties.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:Ansys.ACT.Core.Properties.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:Ansys.ACT.Core.Properties.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Ansys.ACT.Core.Properties.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:Ansys.ACT.Core.Properties.MeansImplicitUseAttribute"/> or <see cref="T:Ansys.ACT.Core.Properties.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Ansys.ACT.Core.Properties.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:Ansys.ACT.Core.Properties.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.PureAttribute">
             <summary>
             Indicates that a method does not make any observable state changes.
             The same as <see cref="T:System.Diagnostics.Contracts.PureAttribute"/>
             </summary>
             <example>
             <code>
             [Pure]
             private int Multiply(int x, int y)
             {
               return x*y;
             }
            
             public void Foo()
             {
               const int a=2, b=2;
               Multiply(a, b); // Waring: Return value of pure method is not used
             }
             </code>
             </example>
        </member>
        <member name="T:Ansys.ACT.Core.Properties.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
    </members>
</doc>
